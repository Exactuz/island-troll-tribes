package DummySpells

// Standard library imports:
import AbilityObjEditing
import HashMap
import ClosureEvents
import ObjectIdGenerator
import ChannelAbilityPreset
import Sounds
import Orders
import EventHelper
import LinkedList

// Local imports:
import LocalObjectIDs
import HealingItems
import StringBuilder
import ToolTipsUtils
import LocalAssets
import HealingSystem
import UnitExtensions
import ClosureTimers
import ItemObjEditing
import Items
import LocalItemObjEditing
import Lodash
import ObjectIDManager
import SpellBookInitializer
import AbilityObjectCreationUtils
import SpellBookHashMap
import Cure
import TrollUnitFactory
import Soundsets
import TrollUnitTextConstant
import ColorUtils
import DiseasePotion
import AcidBomb

let TT_PHILOSOPHERS_STONE = "Philosopher's stone accumulates energy over time. It can be used to conjure Potion effects"
int posX = 0
int posY = 0
LinkedList<string>hotKeys = asList("Q","W","E","R","A","S","D","F","Z","X","C")
LinkedList<int>potionItemsList = asList(ITEM_HEALING_POTION, ITEM_MANA_POTION, ITEM_ANTI_MAGIC_POTION, 
                                        ITEM_ANABOLIC_POTION, ITEM_CURE_ALL, ITEM_DRUNKS_POTION, 
                                        ITEM_NETHER_POTION, ITEM_OMNICURE, ITEM_ACID_BOMB, ITEM_DISEASE_POTION)
LinkedList<int>potionAbilIds = asList(ABILITY_CURE_ALL_ITEM)                                        

//let duration = DURATION

 
LinkedList<int>alchemistAbilityIds = asList(ABILITY_ALCHEMIST_HEALING_POTION, ABILITY_ALCHEMIST_MANA_POTION, ABILITY_ALCHEMIST_ANTI_MAGIC_POTION,
                                            ABILITY_ALCHEMIST_ANABOLIC_POTION, ABILITY_ALCHEMIST_CURE_ALL, ABILITY_ALCHEMIST_DRUNKS_POTION,
                                            ABILITY_ALCHEMIST_NETHER_POTION, ABILITY_ALCHEMIST_OMNICURE, ABILITY_ALCHEMIST_ACID_BOMB, ABILITY_ALCHEMIST_DISEASE_POTION) 
/*                  
function createPotionAbilitiesFromObjectDefinition()
    for itemId in potionAbilIds
        let index = potionAbilIds.indexOf(itemId)
        let abilDefinition = ObjectDefinition(itemId.toRawCode())
        itemCureAll.g
        let abilId = alchemistAbilityIds.get(index)
        let name = abilDefinition.
        let icon = itm.getIconPath()
        let tt_basic = itm.getTooltip()
        let tt_extended = itm.getExtendedTooltip()
        let ability1 = itm.getAbilityByIndex(1)
        ability1.getHandleId()
        let abilities =ability1.getHandleId()// BlzGetItemStringField(itm, ConvertItemStringField('iabi'))
        let hotKey = hotKeys.get(index)
        
        createDummyPotionAbility(abilId, name, icon, tt_basic, tt_extended, abilities, new Pair(posX,posY), hotKey)
        if posX <3
            posX+=1
        else
            posX=0
            posY++

function reinitializeAlchemist(int unitId) returns HeroDefinition
    return createSubTroll(unitId)
        ..setNameEnhance("Alchemist")
        ..setAttackDamage(10)
        ..setAttackSpeed(1.70)
        ..setModelFile(LocalUnits.terrorTroll)
        ..setIcons(Icons.bTNTemp)
        ..setUnitSoundSet(Soundsets.batTroll)
        ..setSpeedBase(310)
        ..setButtonPositionX(3)
        ..setButtonPositionY(0)
        ..setScalingValue(1)
        ..setSightRadiusDay(1800)
        ..setSightRadiusNight(1800)
        ..setTooltipExtended(TOOLTIP_ALCHEMIST)
        ..setProperNames("Alchemist")
        ..setProperNamesUsed(1)
        ..setHotkey("E")
        ..setAbilitiesEnhance(commaList(ABILITY_CREATE_PHILOSOPHERS_STONE), commaList(ABILITY_ALCHEMIST_SPELLBOOK, ABILITY_OMNIGATHERER))

function reinitializeSpellBook()
    let ALCHEMIST_ABILITY_LVL_1 = commaList(ABILITY_ALCHEMIST_HEALING_POTION, ABILITY_ALCHEMIST_MANA_POTION, ABILITY_ALCHEMIST_ANTI_MAGIC_POTION,
                                            ABILITY_ALCHEMIST_ANABOLIC_POTION, ABILITY_ALCHEMIST_CURE_ALL)
    let ALCHEMIST_ABILITY_LVL_2 = ALCHEMIST_ABILITY_LVL_1+ "," +commaList(ABILITY_ALCHEMIST_DRUNKS_POTION, ABILITY_ALCHEMIST_NETHER_POTION, ABILITY_ALCHEMIST_OMNICURE)
    let ALCHEMIST_ABILITY_LVL_3 = ALCHEMIST_ABILITY_LVL_2+ "," +commaList(ABILITY_ALCHEMIST_ACID_BOMB, ABILITY_ALCHEMIST_DISEASE_POTION,  'A03Z'   ) // 'A03Z' is fervor potion

    let ALCHEMIST_ABILITY_HASH_NEW = new HashMap<int, string>()
    ..put(1 , ALCHEMIST_ABILITY_LVL_1)
    ..put(2 , ALCHEMIST_ABILITY_LVL_2)
    ..put(3 , ALCHEMIST_ABILITY_LVL_3) 
    createHeroSpellBook(ABILITY_ALCHEMIST_SPELLBOOK, 3)
    ..setNameEnhance("R", "Philosopher's Stone conjuration powers")
    ..setTooltipNormalExtended(1, "Alchemist can use energy of The Philosopher's Stone to conjure spell effects of potions")
    ..setAbilitiesPerLevel(ALCHEMIST_ABILITY_HASH_NEW)
    ..setRequiredLevel(0)
    ..setLevelSkipRequirement(0)        
    ..presetButtonPosNormal(2, 1)
    ..setIconNormal(Icons.bTNtemp) 



*/

let TOOLTIP_ALCHEMIST  = "" +
    "The Alchemist has discovered the secret of the Philosopher's Stone "+
    "which allows him to conjure potion effects. "+
    "Can only choose 1 subClass!".color(COLOR_RED)+"\n\nDifficulty: ".color(COLOR_LIGHT_BLUE) + "Medium".color(COLOR_ORANGE)



function createPotionAbilities()
    for itemId in potionItemsList
        let index = potionItemsList.indexOf(itemId)
        let itm = CreateItem(itemId, 0, 0)
        //ObjectDefinition(key)
        itm.setVisible(false)
        let abilId = alchemistAbilityIds.get(index)
        let name = itm.getName()
        let icon = itm.getIconPath()
        let tt_basic = itm.getTooltip()
        let tt_extended = itm.getExtendedTooltip()
        let ability1 = itm.getField(ITEM_IF_COOLDOWN_GROUP)
        //ability1.getHandleId()
        let abilities =ability1 //BlzGetAbilityId(ability1) //ability1.getHandleId()// BlzGetItemStringField(itm, ConvertItemStringField('iabi'))
        let hotKey = hotKeys.get(index)
        
        //createDummyPotionAbility(abilId, name, icon, tt_basic, tt_extended, abilities, new Pair(posX,posY), hotKey)
        //print(name+"    "+abilities.toString()+" hotKey - "+hotKey)
        if posX <3
            posX+=1
        else
            posX=0
            posY++
       
        

        
        


function createDummyPotionAbility(int abilId, string name, string icon, string tt, string tt_extended, int abilities, Pair<int,int> buttonPos, string hotKey)
    new ChannelAbilityPreset(abilId, 1, true)
        ..presetCastingTime(lvl-> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl ->0)
        ..setHeroAbility(true)
        ..setHotkeyNormal(hotKey)
        ..setName(name)
        ..presetTooltipNormal(lvl -> makeToolTipNorm(hotKey, tt))
        ..presetTooltipNormalExtended(lvl -> tt_extended)
        ..setIconNormal(icon)
        ..setIconResearch(icon)
        ..setIconTurnOff(icon)
        ..setButtonPositionNormalX(buttonPos.a)
        ..setButtonPositionNormalY(buttonPos.b)
        ..setFollowThroughTime(1, 0)
        ..setEditorSuffix("(Wurst)")

init



    /*
    createPotionAbilities()
    doAfter(ANIMATION_PERIOD) ->
        reinitializeSpellBook() 
        doAfter(ANIMATION_PERIOD) ->
            reinitializeAlchemist(UNIT_ALCHEMIST)
  */      
    
   // alchemistSpellbook..setAbilitiesPerLevel(ALCHEMIST_ABILITY_HASH)


