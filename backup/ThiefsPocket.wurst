package ThiefsPocket

import Classes
import LocalObjectIDs
import HashMap
import OnUnitEnterLeave
import Items
import LocalAssets
import UnitExtensions
import ChannelAbilityPreset
import Orders
import ClosureEvents
import ClosureTimers
import InventoryEvent
import HashSet
import BushSpawns
import ItemObjEditing
import ClosuresForItems
import ItemExtensions
import IdListConstant
//import Steal


public IterableMap<unit, ThiefsPocket> instances = new IterableMap<unit, ThiefsPocket>()


public let stolenItems = new HashSet<item>()

let TT_NAME = "A Thief's pocket"
let TT_TOOLTIP = "Thief has a secret pocket granting him an extra slot. \nThief's pocket can only hold items that are stolen or come from thief's bush."

@compiletime function createDummyItem() returns ItemDefinition
    return createBasicItem(ITEM_THIEFS_POCKET_DUMMY)
            ..setName(TT_NAME)
            ..setInterfaceIcon(LocalIcons.bTNThiefPouch)
            ..setDroppedWhenCarrierDies(false)
            ..setTooltipExtended(TT_TOOLTIP)

@compiletime function createThiefsPocketDummyAbility() returns AbilityDefinitionHardenedSkin
    return new AbilityDefinitionHardenedSkin(ABILITY_THIEFS_POCKET)
        ..setIconNormal(LocalIcons.bTNThiefPouch)
        ..setButtonPositionNormalY(1)
        ..setCheckDependencies(false)
        ..setChancetoReduceDamage(1, 0)
        ..setIgnoredDamage(1, 0.)
        ..setMinimumDamage(1, 0.)
        ..setEditorSuffix("(Wurst)")
        ..setHotkeyNormal("")
        ..setName(TT_NAME)
        ..setRequirements("")
        ..setTooltipNormal(1, TT_NAME)
        ..setTooltipNormalExtended(1, TT_TOOLTIP)


class ThiefsPocket
    unit hero = null
    HashSet<unit> robbedTradingShips = new HashSet<unit>()
    item dummy = null  

    construct(unit hero)
        this.hero = hero

    function addRobbedShip(unit target)
        robbedTradingShips.add(target)

    function addDummyItem()
        let foundDummy = hero.getItemById(ITEM_THIEFS_POCKET_DUMMY)
        if foundDummy != null
            nullTimer() -> 
                foundDummy.remove()

        dummy.remove()
        dummy = createItem(ITEM_THIEFS_POCKET_DUMMY, hero.getPos())
        dummy.setVisible(false)        
        nullTimer() ->        
            hero.addItemHandleToSlot(dummy, 5) 




function onUnitEnter(unit troll)
    if troll.getTrollBaseClass() == UNIT_THIEF
        if not instances.has(troll)
            instances.put(troll, new ThiefsPocket(troll))
            doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
                if troll.isAlive() and not troll.isPaused()
                    let itm =generateThiefsBushItem(troll)
                    stolenItems.add(itm)
                    troll.removeItem(itm)
                    troll.addItemHandleToSlot(itm, 5)
                    destroy cb
                



function onItemMoved(unit troll, item manipulatedItem)
    if not troll.isAlive()
        return

    var order = GetIssuedOrderId()
    var u = GetTriggerUnit()
    var orderItm = GetOrderTargetItem()
    var slotFrom = u.getItemSlot(orderItm)
    var slotTo = order - SpecialOrders.itemdrag00

    let instance = instances.get(troll)
    if instance == null
        return
    nullTimer() ->                
        let itm = troll.itemInSlot(5)
        if itm == null and (slotFrom == 5 or slotTo == 5)
            nullTimer() -> 
                print("onItemMoved addDummyItem()")        
                instance.addDummyItem()

        else if stolenItems.has(itm) or (itm.getTypeId() == ITEM_THIEFS_POCKET_DUMMY and stolenItems.has(manipulatedItem))
            if stolenItems.has(itm) and troll.hasItemById(ITEM_THIEFS_POCKET_DUMMY)
                troll.removeItemById(ITEM_THIEFS_POCKET_DUMMY)
            nullTimer() -> 
                addItemToThiefsPocket(troll, manipulatedItem)

        else if not stolenItems.has(itm) and itm != null and itm.getTypeId() != ITEM_THIEFS_POCKET_DUMMY
            troll.removeItem(itm)
            doAfter(ANIMATION_PERIOD) ->
                troll.addItemHandle(itm)  
            nullTimer() ->
                print("onItemMoved else addDummyItem()")           
                instance.addDummyItem() 



function onItemDropped(unit troll, item manipulatedItem)
    print("dropped")
    let instance = instances.get(troll)
    if instance == null
        return    
    if manipulatedItem.getTypeId() == ITEM_THIEFS_POCKET_DUMMY
        if not troll.isAlive()
            nullTimer() -> 
                manipulatedItem.remove()
            return
        nullTimer() -> 
            instance.addDummyItem()
    else if stolenItems.has(manipulatedItem)
        doAfter(ANIMATION_PERIOD) ->          
            let itm = troll.itemInSlot(5)
            if itm == null
                nullTimer() -> 
                    instance.addDummyItem()


function onDeath(unit troll)
    doPeriodicallyTimed(ANIMATION_PERIOD, 0.5) (CallbackCounted cb) ->
        let foundDummyItem = findNearestItem(troll.getPos(), 100., i -> i.getTypeId() == DUMMY_ITEM_ID)
        if foundDummyItem != null
            foundDummyItem.remove()    

public function addItemToThiefsPocket(unit troll, item itm)
    if stolenItems.has(itm) and troll.hasItemById(ITEM_THIEFS_POCKET_DUMMY)
        for each in troll.getInventory()
            if SCROLL_LIST.has(each.getTypeId()) and itm.isSpell()
                troll.removeItem(each)
        doAfter(ANIMATION_PERIOD) ->         
            troll.removeItemById(ITEM_THIEFS_POCKET_DUMMY)
            if troll.hasItem(itm)
                troll.removeItem(itm)
            nullTimer() -> 
                troll.addItemHandleToSlot(itm, 5)



function onTargetOrder()
    let order = GetIssuedOrderId()
    let u = GetOrderedUnit()
    if order != Orders.smart or not u.isInventoryFull() or not instances.has(u)
        return
    let target = GetOrderTargetItem()

    // Smart pickup system -> simulate picking up meat like an item if full inventory, like in Bannars StackNSplit system
    // Used to pick up ammo even if inventory's full
    // TODO: Currently only work when troll is in pick up range, make it so the troll move toward ammo even if inventory is full
    if (target != null
        and target.isPickupable()
        and instances.has(u)
        and u.isInventoryFull()
        and u.hasItemById(ITEM_THIEFS_POCKET_DUMMY))
        let collisionSize = u.getCollisionSize()
        let rangeSq = (150.0 + collisionSize).pow(2)
        if u.getPos().distanceToSq(target.getPos()) <= rangeSq
            addItemToThiefsPocket(u, target)


function onRevive(unit troll)
    let instance = instances.get(troll)
    if instance == null
        return
    instance.addDummyItem()


public function generateThiefsBushItem(unit caster) returns item
    let itm = thiefsBush.getItem(caster.getPos())
    return itm

function addStolenItem(item itm)
    stolenItems.add(itm)

function increaseAbilityLvl(unit target)
    if target.getTypeId() == UNIT_THIEF
        let lvl = target.getLevel()
        if lvl <=4
            target.setAbilityLevel(ABILITY_CLOAK, lvl-1)
 

init
    onEnter(()->onUnitEnter(getEnterLeaveUnit()))

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrder())  

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatingUnit().getTypeId() == UNIT_THIEFS_BUSH
            addStolenItem(GetManipulatedItem())

    registerInventoryEvent(EVENT_ITEM_INVENTORY.MOVE)->
        onItemMoved(getInventoryManipulatingUnit(), getInventoryManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatingUnit().getTypeId().getTrollBaseClass() == UNIT_THIEF
            onItemMoved(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatingUnit().getTypeId().getTrollBaseClass() == UNIT_THIEF
            onItemDropped(GetManipulatingUnit(), GetManipulatedItem())

    registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL) ->
        increaseAbilityLvl(GetTriggerUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        if GetTriggerUnit().getTrollBaseClass()==UNIT_THIEF
            onRevive(GetTriggerUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH)->
        if GetTriggerUnit().getTrollBaseClass()==UNIT_THIEF
            onDeath(GetTriggerUnit())        
        


