
library ArgsUtils requires ArrayLists, IDUtils, Table {

  public struct ArgsList extends ArrayListString {
    string cmd;
    string fullMessage;
    player triggerPlayer;

    static method create() -> thistype {
      thistype self = thistype.allocate();
      self.cmd = "";
      self.fullMessage = "";
      self.triggerPlayer = null;
      return self;
    }

    method setCmd(string cmd) -> thistype {
      this.cmd = cmd;
      return this;
    }

    method operator triggerPlayerId() -> integer {
      return GetPlayerId( triggerPlayer );
    }

    method inspect() {
      debug {
        integer i;
        BJDebugMsg("Inspecting ArgsList "+I2S(this));
        BJDebugMsg("cmd="+cmd);
        for (0 <= i < size()) {
          BJDebugMsg("Args["+I2S(i)+"]="+this[i]);
        }
      }
    }

    method onDestroy() {
      triggerPlayer = null;
      fullMessage = "";
      cmd = "";
    }

    // Break down a command like a list of arguments like in shell programs
    static method processArgs(string s) -> ArgsList {
      ArgsList a = ArgsList.create();
      boolean  b = false;
      integer  i = 0;
      string   c = "";
      string   d = "";
      s = s + " ";
      for (0 <= i < StringLength(s)) {
        c = SubString(s, i, i+1);
        if (b) {
          a.fullMessage += c;
        }
        if (c == " ") {
          if (b) {
            if (d != "") a.push(d);
          } else {
            a.cmd = d;
            b = true;
          }
          d = "";
        }
        else if (i > 0) {
          d = d + c;
        }
      }
      a.fullMessage = SubString(a.fullMessage, 0, StringLength(a.fullMessage) - 1);
      return a;
    }
  }
}
