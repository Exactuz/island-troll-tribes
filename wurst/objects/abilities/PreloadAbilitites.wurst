package PreloadAbilitites

// Standard-library imports:
import Assets
import BuffObjEditing
import ClosureTimers
import ClosureEvents
import ClosureForGroups
import ChannelAbilityPreset
import GroupUtils
import HashMap
import HashSet
import InstantDummyCaster
import OnUnitEnterLeave
import OrderIds

// Third-party imports:
import Lodash

// Local imports:
import GameStates
import LocalObjectIDs
import ToolTipsUtils
import UnitExtensions
import DamageListeners
import HealingSystem
import ThiefsPocket
import ColorUtils
import LinkedList
import LocalAssets
import SimError
import DummyCaster
import DummyRecycler
import Preloader

IterableMap<int, int>abilitiesToPreload = null


function initiateAbilities()
    var i = 0
    let dummy = createUnit(
        players[PLAYER_NEUTRAL_PASSIVE],
        DUMMY_UNIT_ID,
        vec2(5., 5.))

    doPeriodicallyCounted(1., abilitiesToPreload.size()) (CallbackCounted cb) ->
        let abilId = abilitiesToPreload.get(i)
        let order  = abilitiesToPreload.get(abilId)
        InstantDummyCaster.castTarget(players[PLAYER_NEUTRAL_PASSIVE], abilId, 11, order, dummy, dummy.getPos())
        i+=1
        if cb.isLast()
            dummy.remove()    

init
    doAfter(1.) -> 
        abilitiesToPreload = new IterableMap<int,int>()
        ..put(ABILITY_LIGHTNING_SHIELD, OrderIds.lightningshield)
        ..put(ABILITY_ANTI_MAGIC, OrderIds.antimagicshell)
        ..put(ABILITY_BOOSTER_FORTITUDE, OrderIds.antimagicshell)
        initiateAbilities()  