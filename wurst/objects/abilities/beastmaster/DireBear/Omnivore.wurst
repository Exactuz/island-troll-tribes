package Omnivore

import Classes
import LocalObjectIDs
import HashMap
import OnUnitEnterLeave
import Items
import LocalAssets
import UnitExtensions
import ChannelAbilityPreset
import Orders
import ClosureEvents
import ClosureTimers
import InventoryEvent
import HashSet
import BushSpawns
import ItemObjEditing
import ClosuresForItems
import ItemExtensions
import IdListConstant
import ColorUtils
import LinkedList
import QuickMake
import HealingSystem
import FoodBuffs

let HEALING_PENALTY = 0.6
let BUFF_DURATION = 60.
let foodList = asList(ITEM_BANANA, ITEM_HONEYCOMB, ITEM_COCONUT, ITEM_COOKED_MEAT, ITEM_SCAVENGED_MUSHROOM)
public IterableMap<unit, Omnivore> instances = new IterableMap<unit, Omnivore>

let TT_NORM = "Omnivore"
let TT_EXT = "Dire Bear is an omnivore and is capable of eating almost anything, even the mushrooms other would find poisonous."+
             "\nGain +{0} Strength".format(STRENGHT_BONUS.toString().color(COLOR_GREEN))+
             " and +{0}% increased healing received from food for every different kind of food you have eaten recently.".format((HEALING_BONUS*100).toString().color(COLOR_GREEN))+
             "\nA food buff lasts {0} seconds.".format(BUFF_DURATION.toString().color(COLOR_LIGHT_BLUE))+
             "\nYou will lose all food buffs if you consume the same food twice in a row.".color(COLOR_RED)

let TT_NORM_VORACIOUS_BEAR = "Voracious Bear"
let TT_EXT_VORACIOUS_BEAR = "Dire Bear is a huge animal with even bigger appetite that cannot be satisfied with regular amount of food."+
                            "\nHealing from food has only {0}% effect on you.".format((HEALING_PENALTY*100).toString().color(COLOR_RED))

@compiletime function createOmnivoreDummyAbility()
    new AbilityDefinitionEvasion(ABILITY_OMNIVORE)
        ..setChancetoEvade(1, 0.)
		..setLevels(1)
        ..setTooltipNormal(1, TT_NORM)
        ..setIconNormal(LocalIcons.bTNOmnivore)
        ..setTooltipLearn(TT_NORM)
        ..setTooltipLearnExtended(TT_EXT)
        ..setTooltipNormalExtended(1, TT_EXT)

@compiletime function createVoraciousBearDummyAbility()
    new AbilityDefinitionEvasion(ABILITY_VORACIOUS_BEAR)
        ..setChancetoEvade(1, 0.)
		..setLevels(1)
        ..setTooltipNormal(1, TT_NORM_VORACIOUS_BEAR)
        ..setIconNormal(LocalIcons.bTNHungryBear)
        ..setTooltipLearn(TT_NORM_VORACIOUS_BEAR)
        ..setTooltipLearnExtended(TT_EXT_VORACIOUS_BEAR)
        ..setTooltipNormalExtended(1, TT_EXT_VORACIOUS_BEAR)


class Food
    int abilId
    int buffId
    bool isActive = false
    real duration = 0
    construct(int _abilId, int _buffId)
        abilId = _abilId
        buffId = _buffId 
            

    function addAbility(unit troll)
        duration = 60.
        if not troll.hasAbility(abilId)
            troll.addAbility(abilId)
        if not troll.hasAbility(buffId)
            troll.addAbility(buffId)    
        doPeriodically(1.) (CallbackPeriodic cb) ->
            duration-=1
            if this.duration <=0         
                isActive = false
                removeAbility(troll)
                destroy cb

    function removeAbility(unit troll)
        troll.removeAbility(abilId)
        troll.removeAbility(buffId)
        

class Omnivore
    int previousEatenFood
    unit troll
    real dietaryHealingBonus = 0.
    Food meat = new Food(ABILITY_DIRE_BEAR_MEAT_BONUS, BUFF_DIRE_BEAR_MEAT_BONUS)
    Food banana = new Food(ABILITY_DIRE_BEAR_BANANA_BONUS, BUFF_DIRE_BEAR_BANANA_BONUS)
    Food coconut = new Food(ABILITY_DIRE_BEAR_COCONUT_BONUS, BUFF_DIRE_BEAR_COCONUT_BONUS)
    Food mushroom = new Food(ABILITY_DIRE_BEAR_MUSHROOM_BONUS, BUFF_DIRE_BEAR_MUSHROOM_BONUS)
    Food honeycomb = new Food(ABILITY_DIRE_BEAR_HONEYCOMB_BONUS, BUFF_DIRE_BEAR_HONEYCOMB_BONUS)
    IterableMap<int, Food> activeFoodBonuses = new IterableMap<int, Food>()
        ..put(ITEM_COOKED_MEAT, meat)
        ..put(ITEM_BANANA, banana)
        ..put(ITEM_COCONUT, coconut)
        ..put(ITEM_SCAVENGED_MUSHROOM, mushroom)
        ..put(ITEM_HONEYCOMB, honeycomb)
        

    construct(unit _troll)
        troll = _troll


    function onFoodUsed(int foodUsed)
        if foodUsed == previousEatenFood
            for each in activeFoodBonuses
                activeFoodBonuses.get(each).isActive=false
            updateFoodBonuses()
        else        
            activeFoodBonuses.get(foodUsed).isActive=true
            updateFoodBonuses() 
        previousEatenFood = foodUsed
        //print("food used = "+GetObjectName(foodUsed))
        //print("previusEatenFood ="+GetObjectName(previousEatenFood))

    function updateFoodBonuses()
        var healingBonus = 0.
        for each in activeFoodBonuses
            if activeFoodBonuses.get(each).isActive
                activeFoodBonuses.get(each).addAbility(troll)
                healingBonus+=0.1
            else
                activeFoodBonuses.get(each).removeAbility(troll)   
        dietaryHealingBonus = healingBonus

    function onUnitHealed(HealingInstance healingInstance)
        healingInstance.scaleMultiplier(HEALING_PENALTY + dietaryHealingBonus)


function onSub(unit troll)
    if not instances.has(troll)
        doAfter(ANIMATION_PERIOD)->
            if not instances.has(troll)
                instances.put(troll, new Omnivore(troll))


function onUnitHealed(HealingInstance healingInstance)
    if not healingInstance.target.hasAbility(ABILITY_OMNIVORE) 
        return
    if not healingInstance.healingType == HealingType.ITEM
        return
    let instance = instances.get(healingInstance.caster)
    if instance == null
        return
    instance.onUnitHealed(healingInstance)
      
function onItemUse(unit troll, item itm)
    if not foodList.has(itm.getTypeId())
        return
    let instance = instances.get(troll)
    if instance == null
        return
    instance.onFoodUsed(itm.getTypeId())

init
    EventListener.onCast(ABILITY_DIRE_BEAR) (unit caster) ->
        onSub(caster)

    onUnitHealed() ->
        onUnitHealed(getHealingInstance())   

    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) ->
        onItemUse(GetTriggerUnit(), GetManipulatedItem()) 
        
    
