package HideMeat

// Standard lib Imports:
import ChannelAbilityPreset
import ClosureEvents
import HashMap
import Assets
import OrderIds
import ErrorHandling
import SoundUtils

// Local Imports:
import UnitEntity
import Hostile
import SimError
import HealingSystem
import PlayerExtensions
import LocalObjectIDs
import ColorUtils
import ToolTipsUtils
import MoveCorpses
import LocalAssets
import LocalItemObjEditing
import Items
import ClosureTimers
import QuickMake
import DummyCorpse
import UnitExtensions

let COOLDOWN_HIDE = 120.
let TT_HIDE_NORM = "Hide Meat."
let TT_HIDE_EXT = "Create a stash of 8 raw meat which can be retrieved later."+
                  "\nHas {0} seconds cooldown.".format(COOLDOWN_HIDE.toString().color(COLOR_LIGHT_BLUE))
let TT_RETRIEVE_NORM = "Retrieve Meat."
let TT_RETRIEVE_EXT = "Retrieve meat from your stash, instantly recovering 8 raw meat."
let TARGET_ALLOWED = commaList(TargetsAllowed.structure,
                                TargetsAllowed.friend,
                                TargetsAllowed.neutral,
                                TargetsAllowed.vulnerable,
                                TargetsAllowed.invulnerable)     

IterableMap<item, bool> triggerFlags = new IterableMap<item, bool>()
HashMap<item, unit> instances = new HashMap<item, unit>()

@compiletime function createHideMeatAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_HIDE_MEAT, 1, true)
        ..presetTargetTypes(Targettype.UNIT)
        ..setName(TT_HIDE_NORM)
        ..setHotkeyNormal("E")
        ..setTooltipNormal(1, TT_HIDE_NORM)
        ..setTooltipNormalExtended(1, TT_HIDE_EXT)
        ..presetCooldown(lvl -> COOLDOWN_HIDE)
        ..presetManaCost(lvl -> 0)
        ..presetCastRange(lvl -> 150.)
        ..presetButtonPosNormal(0, 3)
        ..setFollowThroughTime(1, 0)
        ..setIconNormal(LocalIcons.bTNFeedPet)
        ..setTargetsAllowed(1, TARGET_ALLOWED)
        ..setAnimationNames("stand")
        ..setBaseOrderID(1, "curse")

@compiletime function createHiddenRawMeatItem() returns ItemDefinition
    return createBasicItem(ITEM_HIDDEN_RAW_MEAT)
        ..setInterfaceIcon(LocalIcons.bTNFeedPet)
        ..setNameEnhance("Raw meat stash")
        ..setTooltipExtended("Dire Wolf can recover 8 raw meat from this stash.")
        ..setDescription("Dire Wolf can recover 8 raw meat from this stash.")
        ..setTintingColor1Red(255)
        ..setTintingColor2Green(0)
        ..setTintingColor3Blue(128)
        ..setCanBeDropped(false)
        ..setCanBeSoldToMerchants(false)

@compiletime function createRetrieveMeat() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_RETRIEVE_MEAT, 1, true)
        ..presetTargetTypes(Targettype.UNIT)
        ..setName(TT_RETRIEVE_NORM)
        ..setHotkeyNormal("E")
        ..setTooltipNormal(1, TT_RETRIEVE_NORM)
        ..setTooltipNormalExtended(1, TT_RETRIEVE_EXT)
        ..presetCooldown(lvl -> 0.)
        ..presetManaCost(lvl -> 0)
        ..presetCastRange(lvl -> 150.)
        ..presetButtonPosNormal(0, 3)
        ..setFollowThroughTime(1, 0)
        ..setIconNormal(LocalIcons.bTNFeedPet)
        ..setTargetsAllowed(1, TARGET_ALLOWED)
        ..setAnimationNames("stand")
        ..setBaseOrderID(1, "curse") 


function onHideMeatCast(unit caster, unit target, int abilId)
    if target.freeSlots()<1
        simError(caster.getOwner(), "Target doesn't have a free inventory slot")
        IssueImmediateOrder(caster, "stop")
        return
    let meatCount = counts.get(caster)
    if not meatCount == 8
        nullTimer() -> 
            caster.endAbilityCooldown(abilId)
        simError(caster.getOwner(), "You need 8 raw meat to use this ability.")
        return
    updateCount(caster, -8)
    caster.removeAbility(ABILITY_HIDE_MEAT)
    nullTimer() -> 
        caster.addAbility(ABILITY_RETRIEVE_MEAT)
        caster.makeAbilityPermanent(ABILITY_RETRIEVE_MEAT, true)
    let itemHandle = createItem(ITEM_HIDDEN_RAW_MEAT, target.getPos())
    nullTimer() -> 
        target.addItemHandle(itemHandle)
        instances.put(itemHandle, caster)
        nullTimer() -> 
            triggerFlags.put(itemHandle, true)

function onRetrieveMeatCast(unit caster, unit target, int abilId)
    let itm = target.getItemById(ITEM_HIDDEN_RAW_MEAT)
    if itm == null
        simError(caster.getOwner(), "There's no meat hidden there.")
        return
    triggerFlags.put(itm, false)
    RemoveItem(itm)
    instances.remove(itm)     
    let meatCount = counts.get(caster)
    if meatCount != 0
        for i =1 to meatCount
            createCorpse(caster.getPos())
    nullTimer() -> 
        updateCount(caster, 8-meatCount)
    caster.removeAbility(ABILITY_RETRIEVE_MEAT)
    nullTimer() ->
        caster.addAbility(ABILITY_HIDE_MEAT)
        caster.makeAbilityPermanent(ABILITY_HIDE_MEAT, true)
    triggerFlags.remove(itm)        

function onDrop(unit caster, item itm)
    if not itm.getTypeId() == ITEM_HIDDEN_RAW_MEAT
        return
    if triggerFlags.get(itm) == false
        return
    doAfter(ANIMATION_PERIOD)->
        caster.addItemHandle(itm)

function onQuickMakePriorEffect(unit caster)
    let itm = caster.getItemById(ITEM_HIDDEN_RAW_MEAT)
    if itm == null
        return
    triggerFlags.put(itm, false)

function onQuickMakeAfterEffect(unit caster)
    let itm = caster.getItemById(ITEM_HIDDEN_RAW_MEAT)
    if itm == null
        return
    triggerFlags.put(itm, true)

function onPickUp(unit caster, item itm)
    if itm.getTypeId()!=ITEM_HIDDEN_RAW_MEAT
        return
    if not caster.isTroll()
        return
    if triggerFlags.get(itm) == false
        return    
    nullTimer() ->
        let instance = instances.get(itm)
        instance.removeAbility(ABILITY_RETRIEVE_MEAT)
        nullTimer() ->
        instance.addAbility(ABILITY_HIDE_MEAT)
        instance.makeAbilityPermanent(ABILITY_HIDE_MEAT, true)
        instances.remove(itm) 
        RemoveItem(itm)
        triggerFlags.remove(itm)
        let meatCount = counts.get(caster)
        if meatCount != 0
            for i =1 to meatCount
                createCorpse(caster.getPos())
        nullTimer() -> 
            updateCount(caster, 8-meatCount)    

function onItemDrop(unit troll, item itm)
    if itm.getTypeId() != ITEM_HIDDEN_RAW_MEAT
        return    
    let instance = instances.get(itm)
    if instance == null
        return
    if triggerFlags.get(itm) == false
        return      
    nullTimer() ->     
        instance.removeAbility(ABILITY_RETRIEVE_MEAT)
        nullTimer() ->
            instance.addAbility(ABILITY_HIDE_MEAT)
            instance.makeAbilityPermanent(ABILITY_HIDE_MEAT, true)
            instances.remove(itm) 
            RemoveItem(itm)
            triggerFlags.remove(itm)
            for i = 1 to 8
                createCorpse(troll.getPos())


init
    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) -> 
        onDrop(GetTriggerUnit(), GetManipulatedItem())
        
    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)

    EventListener.onTargetCast(ABILITY_HIDE_MEAT) (unit caster, unit target) ->
        onHideMeatCast(caster, target, EventData.getSpellAbilityId())

    EventListener.onTargetCast(ABILITY_RETRIEVE_MEAT) (unit caster, unit target) ->
        onRetrieveMeatCast(caster, target, EventData.getSpellAbilityId()) 

    EventListener.onTargetCast(ABILITY_UNLOAD_ITEMS) (unit caster, unit target) ->
        onQuickMakePriorEffect(target)
        doAfter(ANIMATION_PERIOD*3) -> 
            onQuickMakeAfterEffect(target)
    
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        onPickUp(GetTriggerUnit(), GetManipulatedItem()) 

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM)->
        onItemDrop(GetTriggerUnit(), GetManipulatedItem())       
        

                       
               