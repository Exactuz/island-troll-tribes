package RavenousBeast

// Standard library imports:
import AbilityObjEditing
import DamageEvent
import HashMap
import ClosureEvents
import ClosureTimers
import ObjectIdGenerator
import ObjectIds
import UnitExtensions

// Local imports:
import AbilityObjectCreationUtils
import LocalObjectIDs
import Abilities
import Icons
import OnUnitEnterLeave
import HealingSystem
import HealingItems
import Objects
import Classes
import InstantDummyCaster
import Orders
import MoveCorpses
import IdListConstant
import ColorUtils
import LocalAssets
import WolfsVoracityCoat
import Items
import LocalItemObjEditing
import CoatDefinition
import PetReleasing
import QuickMake
import SimError
import DevourAbilitiesDefinitions

public IterableMap<unit, RavenousBeast> ravenousBeastInstances = new IterableMap<unit, RavenousBeast>()

let TT_EXT = "Use this item to consume raw meat.\n Restores {0} life.".format("50".color(COLOR_GREEN))
let MAX_VORACITY_CHARGES = 5
let VORACITY_CHARGE_CD = 10.

let TT_ABILITY_NORM = "Ravenous Beast"
let TT_ABILITY_EXT = "Dire Wolf hungers for the blood of others."+
                     "\nYou gain a charge of Voracity every {0} seconds, up to a maximum of {1}.".format(
                        VORACITY_CHARGE_CD.toString().color(ENERGY_COLOR), MAX_VORACITY_CHARGES.toString().color(COLOR_GOLD_STR))+
                     "\nYou can spend a charge of Voracity to consume raw meat, recovering {0} health.".format(
                        MEAT_HEAL.toString().color(COLOR_GREEN))

@compiletime function createRavenousBeastDummy()
    new AbilityDefinitionEvasion(ABILITY_RAVENOUS_BEAST_DUMMY)
        ..setChancetoEvade(1, 0.)
		..setLevels(1)
        ..setIconNormal(Icons.bTNCannibalize)
        ..setTooltipNormal(1, TT_ABILITY_NORM)
        ..setTooltipLearn(TT_ABILITY_NORM)
        ..setTooltipLearnExtended(TT_ABILITY_EXT)
        ..setTooltipNormalExtended(1, TT_ABILITY_EXT)


@compiletime function createDireBeastDummyItem() returns ItemDefinition
    return createUsableItem(ITEM_DIRE_WOLF_DUMMY_SLOT)
        ..setInterfaceIcon(Icons.bTNCannibalize)
        ..setNameEnhance("Eat raw meat.")
        ..setTooltipExtended(TT_EXT)
        ..setDescription(TT_EXT)
        ..setTintingColor1Red(255)
        ..setTintingColor2Green(0)
        ..setTintingColor3Blue(128)
        ..setScalingValue(1.5)
        ..setCanBeDropped(true)
        ..setCanBeSoldToMerchants(false)
        ..setAbilities(commaList(ABILITY_WOLFS_VORACITY_COAT_ACTIVE))



public class RavenousBeast
    unit troll
    item itemHandle
    bool triggerFlag = true
    int charges
    int voracityChargeCountdown = VORACITY_CHARGE_CD.toInt()
    bool isWolfVoracityActive = false
    CallbackPeriodic cb 
    construct(unit troll)
        this.troll = troll
        charges = MAX_VORACITY_CHARGES
        //PlaySound(Sounds.duskWolf)
        itemHandle = createItem(ITEM_DIRE_WOLF_DUMMY_SLOT, troll.getPos())
        nullTimer() -> 
            itemHandle.setCharges(charges)
            itemHandle.setVisible(false)
            doAfter(ANIMATION_PERIOD) ->     
                addItem()
                startChargeRecovery()      
        troll.removeAbility(LocalAbilityIds.corpseConsume)
        //troll.addAbility(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME)
        //troll.makeAbilityPermanent(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME, true)
    

    function addItem()
        if troll.hasItem(itemHandle)
            //print("troll has Item")
            return
        triggerFlag=false
        let itm = troll.itemInSlot(4)
        if itm != null
            troll.removeItem(itm)
        doAfter(ANIMATION_PERIOD)->
            troll.addItemHandle(itemHandle) 
            nullTimer() ->                
                triggerFlag=true
                //print("triggerFlag = "+triggerFlag.toString())

    function onUse()
        if charges >=0
            if not onWolfVoracityCoat(GetManipulatingUnit())
                simError(troll.getOwner(), "You don't have any raw meat on you.")
            else
                charges-=1
        else
            simError(troll.getOwner(), "You don't have any Voracity charges.")

    function startChargeRecovery()
        cb = doPeriodically(1.) (CallbackPeriodic cb) ->
            updateCharges()
            itemHandle.setCharges(charges)

    function updateCharges()
        if charges >= MAX_VORACITY_CHARGES + isWolfVoracityActive.toInt()*WOLF_VORACITY_CHARGE_BONUS
            return
        voracityChargeCountdown-=1
        if voracityChargeCountdown <=0
            voracityChargeCountdown=VORACITY_CHARGE_CD.toInt()
            charges+=1

    ondestroy
        //troll.removeAbility(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME)
        //troll.addPermanentAbility(LocalAbilityIds.corpseConsume)        

function onSub(unit troll)
    if not ravenousBeastInstances.has(troll)
        doAfter(ANIMATION_PERIOD) -> 
            ravenousBeastInstances.put(troll, new RavenousBeast(troll))
            releasePet(troll)

function consumeCorpseHeal(unit troll)
    //new HealingInstance(troll, troll, MEAT_HEAL, HealingType.ITEM) 

function onQuickMakePriorEffect(unit caster)
    if caster.getTypeId()!= UNIT_DIRE_WOLF
        return
    let instance = ravenousBeastInstances.get(caster)
    if instance == null
        return
    instance.triggerFlag = false

function onQuickMakeAfterEffect(unit caster)
    if caster.getTypeId()!= UNIT_DIRE_WOLF
        return    
    let instance = ravenousBeastInstances.get(caster)
    if instance == null
        //print("null instance")
        return
    nullTimer() -> 
        //print("added item")
        instance.addItem()  
    instance.triggerFlag = true
    //print("triggerFlag = "+instance.triggerFlag.toString())

function onItemDrop(unit troll, item itm)
    if itm.getTypeId() != ITEM_DIRE_WOLF_DUMMY_SLOT
        return  
    nullTimer() -> 
        itm.setVisible(false)    
    let instance = ravenousBeastInstances.get(troll)
    if instance == null
        //print("nullitem")
        return
    if instance.triggerFlag == false
        //print("triggerFlag = "+instance.triggerFlag.toString())
        return
    if not troll.isAlive()
        //print("troll daed")
        return
    nullTimer() ->     
        instance.addItem()
        //print("added item")
            
    
function onRevive(unit troll)
    let instance = ravenousBeastInstances.get(troll)
    if instance == null
        return
    if instance.triggerFlag == false
        return    
    doAfter(ANIMATION_PERIOD) -> 
        instance.addItem()

function onUse(unit troll)
    let instance = ravenousBeastInstances.get(troll)
    if instance == null
        return
    instance.onUse()  

init
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_FINISH)->
        if EventData.getSpellAbilityId()== ABILITY_DIRE_WOLF
            onSub(EventData.getSpellAbilityUnit())

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
        if (GetTriggerUnit().getTypeId()==UNIT_DIRE_WOLF) and (GetSpellAbilityId() == ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME )
            consumeCorpseHeal(EventData.getSpellAbilityUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_DIRE_WOLF_DUMMY_SLOT
            onUse(GetManipulatingUnit())

    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM)->
        onItemDrop(GetTriggerUnit(), GetManipulatedItem())        
    
    registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        if GetTriggerUnit().getTypeId()==UNIT_DIRE_WOLF
            onRevive(GetTriggerUnit())                        
        