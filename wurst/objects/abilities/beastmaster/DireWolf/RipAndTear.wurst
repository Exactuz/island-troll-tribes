package RipAndTear

// Standard library imports:
import AbilityObjEditing
import DamageEvent
import HashMap
import ClosureEvents
import ClosureTimers
import ObjectIdGenerator
import ObjectIds

// Local imports:
import AbilityObjectCreationUtils
import LocalObjectIDs
import Abilities
import Icons
import OnUnitEnterLeave
import HealingSystem
import HealingItems
import Objects
import Classes
import InstantDummyCaster
import Orders
import MoveCorpses
import IdListConstant
import ColorUtils

constant CRITICAL_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
constant SPELLBOOK_ABILITY_ID = compiletime(createHiddenSpellbookWithAbilities(toRawCode(CRITICAL_ABILITY_ID)))
public constant COOLDOWN = 12.
public constant COOLDOWN_REFUND_PER_ATTACK = .5
public constant bleedDps = 7.5

let TT_NORMAL = "Your next attack will tear out a chunk of flesh from your target, recovering 1 raw meat "+
                "and applying a bleed effect which does {0} damage and slows target briefly.".format((bleedDps*4).toString().color(COLOR_RED))+
                "\nYour auto attacks lower the cooldown by {0} seconds.".format(    COOLDOWN_REFUND_PER_ATTACK.toString().color(COLOR_LIGHT_BLUE))+
                "\nHas {0} seconds cooldown.".format(COOLDOWN.toString().color(COLOR_LIGHT_BLUE))


@compiletime function createRipAndTearAbility()
    new AbilityDefinitionPulverize(ABILITY_RIP_AND_TEAR)
    ..setCheckDependencies(false)
    ..setRequirements("")
    ..setHeroAbility(true)
    ..setItemAbility(true)
    ..setLevels(1)
    ..setAnimationNames("spell")
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(0)
    ..setSpecialAttachmentPoint("chest")
    ..setArtSpecial(Abilities.stampedeMissileDeath)
    ..setArtCaster("")
    ..setArtEffect("")
    ..setArtTarget("")
    ..setButtonPositionResearchX(0)
    ..setButtonPositionResearchY(0)
    ..setIconNormal(Icons.bTNGhoulFrenzy)
    ..setIconResearch(Icons.bTNGhoulFrenzy)
    ..setIconTurnOff(Icons.bTNGhoulFrenzy)
    ..setTooltipNormal(1, "Rip and Tear.")
    ..setName("Rip and Tear")
    ..setTooltipLearn("Learn Rip and Tear")
    ..setTooltipLearnExtended(TT_NORMAL)
    ..setTooltipNormalExtended(1, TT_NORMAL)
    ..presetTooltipNormalExtended(lvl->TT_NORMAL)
    ..presetDamageDealt(lvl -> 0.)
    ..presetChancetoStomp(lvl -> lvl*100.-100.)
    ..presetFullDamageRadius(lvl -> 175. + lvl * 25)
    ..presetHalfDamageRadius(lvl -> 350. + lvl * 50)
    ..presetTargetsAllowed(lvl -> "ground,enemy,neutral")

class RipAndTear
    private unit troll
    private real baseClock
    construct(unit troll)
        this.troll = troll
        this.baseClock = COOLDOWN
        doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
            updateTick()
            
    function updateTick()
        if not troll.hasAbility(ABILITY_RIP_AND_TEAR)
            return
        this.baseClock += ANIMATION_PERIOD

    function onEnemyAttackDamage(unit target)
        if not troll.getTypeId() == UNIT_DIRE_WOLF
            return
        if target.getTypeId()== UNIT_FISH
            return
        if baseClock>=COOLDOWN
            onSpellEffect(target)
            troll.setAbilityLevel(ABILITY_RIP_AND_TEAR, 1)
            this.baseClock = 0
        else
            this.baseClock += COOLDOWN_REFUND_PER_ATTACK

    function onSpellEffect(unit target)
        doPeriodicallyCounted(0.5, 4) (CallbackCounted cb) -> 
            InstantDummyCaster.castTarget(troll.getOwner(), ABILITY_BEARS_TENACITY, cb.getCount(), OrderIds.slow, target)
            troll.damageTarget(target, 7.5, true, false, ATTACK_TYPE_NORMAL , DAMAGE_TYPE_NORMAL, null)
        target.removeAbility(ABILITY_BEARS_TENACITY)
        target.removeAbility(BUFF_BEARS_TENACITY)

        onRipAndTear(troll, target)
        flashEffect(Objects.humanSmallDeathExplode, target.getPos())


IterableMap<unit, RipAndTear> instances = new IterableMap<unit, RipAndTear>()

function onUnitEnter(unit u)
    if not u.getTrollBaseClass() == UNIT_BEASTMASTER
        return
    doAfter(ANIMATION_PERIOD) ->      
        if not instances.has(u)
            instances.put(u, new RipAndTear(u))

function onRipAndTear(unit caster, unit target)
    let count = counts.get(caster)
    if count==8
        //new HealingInstance(caster, caster, MEAT_HEAL, HealingType.ITEM)
    else 
        updateCount(caster, 1) 


init    
    DamageEvent.addListener() () ->
    //EventListener.add(EVENT_UNIT_DAMAGED) ->
        if DamageEvent.getType() == DamageType.ATTACK
        //if getDamageType() == DamageType.ATTACK
            let victim = DamageEvent.getTarget()
            let attacker = DamageEvent.getSource()
            if instances.has(attacker) and not victim.isType(UNIT_TYPE_STRUCTURE) and not victim.getOwner().isAllyOf(attacker.getOwner())
                instances.get(attacker).onEnemyAttackDamage(victim)

    onEnter(()->onUnitEnter(getEnterLeaveUnit()))

