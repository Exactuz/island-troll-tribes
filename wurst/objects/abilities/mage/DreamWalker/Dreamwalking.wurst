package Dreamwalking

import ClosureEvents
import LocalObjectIDs
import Icons
import Lodash
import ToolTipsUtils
import ChannelAbilityPreset
import Abilities
import SimError
import HashMap
import LinkedList
import ClosureTimers
import HealingSystem
import ColorUtils
import LocalAssets
import Sleep
import InstantDummyCaster
import BuffObjEditing
import DreamEater2
import UnitExtensions
import BuffIds
import AttachmentPoints

public let DURATION_INT_MULTIPLIER = 0.05
public let DURATION_BASE = 9999
public let MANA_RESTORED = 2
public let DREAMWALKING_COOLDOWN = 20.
public let CAST_RANGE = 300.
public let TT_INDUCE_DREAMWALKING_NORM = "Induce Dreamwalking"
public let TT_INDUCE_DREAMWALKING_EXT = "Induce Dreamwalking state in your ally, recovering {0} mana.".format(MANA_RESTORED_BY_TROLL.toToolTipBlue())
public let TT_DREAMWALKING_NORM = "Dreamwalking"
public let TT_DREAMWALKING_EXT = "Dreamwalker constantly remains in a sleep-like state while retaining ability to move as if he was awake. "+
            "\nRestores {0}+{1}x{2} mana per second. ".format(MANA_RESTORED.toString().color(COLOR_LIGHT_BLUE), DURATION_INT_MULTIPLIER.toString().color(COLOR_LIGHT_BLUE), 
                                            "Intelligence".color(COLOR_TURQUOISE))


public IterableMap<unit, Dreamwalking> dreamwalkingInstances = new IterableMap<unit, Dreamwalking>()

public let ABILITY_DREAMWALKING_BUFF = compiletime(
    createDummyBuffObject(
        TT_DREAMWALKING_NORM.color(COLOR_GREEN),
        "You are dreamwalking.",
        Icons.bTNEtherealFormOn
    ).abilId
)



public class Dreamwalking
    unit troll
    real remainingDuration = 0
    CallbackPeriodic cb
    effect efx
    effect efx2
    construct(unit _troll)
        troll = _troll
        doAfter(ANIMATION_PERIOD)->
            efx = addEffect(BuffIds.banish.toRawCode(), troll, AttachmentPoints.chest)
            efx2 = troll.addEffect(Abilities.sleepTarget, AttachmentPoints.overhead)
            troll.setVertexColor(255, 200, 0, 100)
            troll.removeAbility(ABILITY_SLEEP_OUTSIDE)
            troll.addAbility(ABILITY_DREAMWALKING_DUMMY)
            troll.addAbility(ABILITY_DREAMWALKING_BUFF)
            troll.makeAbilityPermanent(ABILITY_DREAMWALKING_DUMMY, true)
            cb = doPeriodically(0.125) (CallbackPeriodic cb) ->
                troll.setMana(troll.getMana()+0.125*(troll.getInt(true)*DURATION_INT_MULTIPLIER+MANA_RESTORED))


    function startDreamWalking()
        troll.setMana(troll.getMana()+MANA_RESTORED)
        let intelligence = troll.getInt(true)
        remainingDuration+=(DURATION_BASE+DURATION_INT_MULTIPLIER*intelligence)
        troll.addAbility(ABILITY_DREAMWALKING_BUFF)
        /*
        //troll.addAbility(ABILITY_DREAMWALKING_BUFF)
        //if InstantDummyCaster.castTarget(troll.getOwner(), ABILITY_DREAMWALKING_NETHER_EFFECT,1,  "curse", troll, troll.getPos())
            //print("casted")
        
        cb = doPeriodically(0.125) (CallbackPeriodic cb) ->
            remainingDuration-=0.125
            if remainingDuration<=0
                remainingDuration = 0
                troll.removeAbility(ABILITY_DREAMWALKING_BUFF)
                //troll.setVertexColor(255, 255, 255, 255)
                if cb != null
                    destroy cb
        */

    function isDreamwalking() returns bool
        return true


function createDreamWalkingBuff()
    new BuffDefinition(BUFF_DREAMWALKING, BuffIds.commandAura)
        ..setIcon(Icons.bTNEtherealFormOn)
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setArtSpecial(BuffIds.banish.toRawCode())
        ..setArtTarget(BuffIds.banish.toRawCode())
        //..setEffectSound(1, "")
        ..setEffectSoundLooping(1,"")
        ..setEditorSuffix(1, "(Wurst)")


@compiletime function createAbilityNetherBuff() returns AbilityDefinitionCurse
    return new AbilityDefinitionCurse(ABILITY_DREAMWALKING_NETHER_EFFECT)
        ..setDummyAbility()
        ..setCheckDependencies(false)
        ..setHeroAbility(true)
        ..setTooltipNormal(1, TT_DREAMWALKING_NORM)
        ..setTooltipNormalExtended(1, "You are dreamwalking.")
        ..presetBuffs(lvl -> toRawCode(BUFF_DREAMWALKING))
        ..presetManaCost(lvl -> 0)
        ..presetDurationHero(lvl -> DURATION_BASE.toReal())
        ..presetDurationNormal(lvl -> DURATION_BASE.toReal())
        ..setName("Dreamwalking")
        ..presetChancetoMiss(lvl -> 0)
        ..presetTargetsAllowed(lvl -> TARGET_ALLOWED)
        ..setEditorSuffix("(Wurst)")  



@compiletime function createHypnosisDummy() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_DREAMWALKING_DUMMY, 1, true)
        ..presetTargetTypes(Targettype.UNIT)
        ..setName(TT_INDUCE_DREAMWALKING_NORM)
        ..setHotkeyNormal("F")
        ..setTooltipNormal(1, TT_INDUCE_DREAMWALKING_NORM)
        ..setTooltipNormalExtended(1, TT_INDUCE_DREAMWALKING_EXT)
        ..presetCooldown(lvl -> DREAMWALKING_COOLDOWN)           
        ..presetManaCost(lvl -> 0)
        ..presetCastRange(lvl -> CAST_RANGE)
        ..presetButtonPosNormal(3, 2)
        ..setFollowThroughTime(1, 0)
        ..setIconNormal(Icons.bTNEtherealFormOn)
        ..setTargetsAllowed(1, commaList(TargetsAllowed.friend, TargetsAllowed.hero))
        ..setBaseOrderID(1, "curse")
        ..setTooltipNormal(1, makeToolTipNorm("F", TT_DREAMWALKING_NORM))  




function onCast(unit caster, unit target)
    if target != caster
        let efx = target.addEffect(Abilities.sleepSpecialArt, AttachmentPoints.overhead)
        let efx2 = target.addEffect(Abilities.sleepTarget, AttachmentPoints.overhead)
        target.setMana(target.getMana()+MANA_RESTORED_BY_TROLL)
        doAfter(DURATION_HERO) ->
            efx.destr()
            efx2.destr()
        //InstantDummyCaster.castTarget(caster.getOwner(), ABILITY_SLEEP_OUTSIDE, 1, "Sleep", target)
        /*
        doAfter(ANIMATION_PERIOD) ->
            caster.endAbilityCooldown(ABILITY_DREAMWALKING_DUMMY)
            caster.setAbilityCooldown(ABILITY_DREAMWALKING_DUMMY, 0, COOLDOWN)
            doAfter(ANIMATION_PERIOD) ->
                caster.startAbilityCooldown(ABILITY_DREAMWALKING_DUMMY) 
                caster.setAbilityCooldown(ABILITY_DREAMWALKING_DUMMY, 0, DREAMWALKING_COOLDOWN)
                */
        return
/*
    if target.getTypeId() == UNIT_DREAMWALKER
        let instance = dreamwalkingInstances.get(target)
        if instance == null
            return
        instance.startDreamWalking()
        let efx = caster.addEffect(Abilities.sleepSpecialArt, AttachmentPoints.overhead)
        let efx2 = caster.addEffect(Abilities.sleepTarget, AttachmentPoints.overhead)
        print("added efx")
        doAfter(DURATION_HERO) ->
            efx.destr()
            efx2.destr()
*/            
        

function onSub(unit caster)
    let instance = dreamwalkingInstances.get(caster)
    if instance != null
        return
    dreamwalkingInstances.put(caster, new Dreamwalking(caster))

init
    EventListener.onTargetCast(ABILITY_DREAMWALKING_DUMMY    , (unit caster, unit target) -> onCast(caster, target))

    EventListener.onCast(ABILITY_DREAMWALKER) (unit caster) ->
        onSub(caster)        