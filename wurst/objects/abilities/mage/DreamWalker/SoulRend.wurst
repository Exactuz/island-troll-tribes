package SoulRend

import ClosureEvents
import LocalObjectIDs
import Icons
import Lodash
import ToolTipsUtils
import ChannelAbilityPreset
import Abilities
import SimError
import HashMap
import LinkedList
import ClosureTimers
import HealingSystem
import ColorUtils
import LocalAssets
import Sleep
import InstantDummyCaster
import BuffObjEditing
import ReplenishHealth
import BuffIds
import AttachmentPoints
import Orders
import DamageEvent
import DamageListeners
import Dreamwalking

IterableMap<unit, SoulRend> soulRendInstances = new IterableMap<unit, SoulRend>()

let INT_DAMAGE_MULTIPLIER = 0.1
let INT_MANA_COST_MULTIPLIER = 0.1
let TOOLTIP_NORM = "Soul Rend"
let TOOLTIP_EXTENDED = "While in Dream World, Dreamwalker deals additional magic damage to enemies equal to {0}x{1} with every attack.".format(
                        INT_DAMAGE_MULTIPLIER.toString().color(COLOR_RED),"Intelligence".color(COLOR_TURQUOISE))+
                        "\nDamage and manacost is doubled at lvl {0}".format("4".color(COLOR_GOLD))+
                        "\nCosts {0}x{1} mana.".format(
                        INT_MANA_COST_MULTIPLIER.toString().color(COLOR_LIGHT_BLUE),"Intelligence".color(COLOR_TURQUOISE))


class SoulRend
    unit troll
    bool toggledOn = false
    effect efx
    Dreamwalking instance 

    construct(unit _troll)
        troll = _troll
        nullTimer() -> 
            instance = dreamwalkingInstances.get(troll)

    function onAttack(unit target)  
        if not toggledOn
            return
        if not instance.isDreamwalking()
            return
        let lvlMultiplier = troll.getLevel()>=4 ? 2 : 1
        let intelligence = troll.getInt(true)
        let damage = intelligence*INT_DAMAGE_MULTIPLIER*lvlMultiplier
        troll.damageTarget(target, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
        troll.setMana(troll.getMana()-intelligence*INT_MANA_COST_MULTIPLIER*lvlMultiplier)
        flashEffect(Abilities.spellBreakerAttack, target, AttachmentPoints.origin)

    function toggle(int orderId)    
        switch orderId
            case Orders.immolation
                toggledOn = true
                efx = addEffect(Abilities.witchDoctorMissile, troll, AttachmentPoints.hand)
                efx.setScale(1.0)
                efx.setColor(colorA(43, 80, 184, 255))
            case Orders.unimmolation
                toggledOn = false
                if efx!=null
                    efx.destr()
function createBuff()
    new BuffDefinition(BUFF_SOULREND_SELF, BuffIds.immolation)
    ..setIcon(Icons.bTNShamanAdept)
    ..setArtSpecial(1, "")
    ..setArtTarget(1, "")
    ..setTooltipNormal(1, TOOLTIP_NORM)
    ..setTooltipNormalExtended(1, "Soul Rend is currently active")

class SoulRendAbility extends AbilityDefinitionImmolationcreep
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setCheckDependencies(false)
        this.setDamageperInterval(1, 0)
        this.setManaDrainedperSecond(1, 0)
        this.setBufferManaRequired(1, 0)
        this.setIconNormal(Icons.bTNShamanAdept)
        this.setIconTurnOff(LocalIcons.bTNDeactivateSoulRend)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setBuffs(1, toRawCode(BUFF_SOULREND_SELF))
        this.setTargetsAllowed(1, "")
        this.setCooldown(1, 0)
        this.setAreaofEffect(1, 1)
        this.setHeroAbility(false)
        this.setLevels(1)
        this.setManaCost(1, 0)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, "Activate "+TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setTooltipLearnExtended(TOOLTIP_EXTENDED)
        this.setTooltipTurnOffExtended(1, TOOLTIP_EXTENDED)
        this.setTooltipTurnOff(1, makeToolTipNorm(hotkey, "Deactivate "+TOOLTIP_NORM))
        this.setHotkeyNormal(hotkey)
        this.setHotkeyTurnOff(hotkey)


@compiletime function createReplenishHealth()
    new SoulRendAbility(ABILITY_SOULREND, "R", new Pair(3, 0))
    createBuff()

function onSub(unit caster)
    let instance = soulRendInstances.get(caster)
    if instance != null
        return
    soulRendInstances.put(caster, new SoulRend(caster))

function onOrder(int orderId, unit caster)
    let instance = soulRendInstances.get(caster)
    if instance == null
        return
    instance.toggle(orderId)
            
function onAttack(unit source, unit target)
    let instance = soulRendInstances.get(source)
    if instance == null
        return
    instance.onAttack(target)


init
    EventListener.onCast(ABILITY_DREAMWALKER) (unit caster) ->
        onSub(caster)

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        if EventData.getOrderedUnit().hasAbility(ABILITY_SOULREND)
            onOrder(EventData.getIssuedOrderId(), EventData.getOrderedUnit())

    DamageEvent.addListener(DamageListenerPriorities.PANTHER_INSTINCT castTo int) ->
        if DamageEvent.getType() == DamageType.ATTACK
            onAttack(DamageEvent.getSource(), DamageEvent.getTarget())
    
              

