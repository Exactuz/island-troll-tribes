package Zap

import RegisterEvents
import ClosureTimers
import Orders
import AbilityObjEditing
import BuffObjEditing
import ClosureForGroups
import TimerUtils
import HashMap
import Lodash
import OverCharge
import ToolTipsUtils
import InstantDummyCaster
import Assets
import ObjectIdGenerator
import ObjectIds
import LocalObjectIDs
import ColorUtils
import DummyCaster
import UnitExtensions
import DamageEvent
import DamageListeners
import IdListConstant
import HashList
import LinkedList
import SimError
import PlayerExtensions
import LastOrder

let SLOW_ABILITY_ID   = compiletime(ABIL_ID_GEN.next())
let BUFF_ZAP_SLOW     = compiletime(ABIL_ID_GEN.next())

let CAST_RANGE = 800.
let COOLDOWN = 3.
let CHARGE_DURATION = 15.
let MANACOST = 15
let MAIN_DAMAGE = 20.
let MAIN_DAMAGE_INT_MULTIPLIER = 1.
let EXPLOSION_FORK_AMOUNT = 2
let OVERCHARGE_FORK_AMOUNT = 3
let OVERCHARGE_FORK_AOE = 400.
let CHARGE_BOUNCE_RADIUS = 400.
let CHARGE_DAMAGE = 35.
let CHARGE_DAMAGE_INT_MULTIPLIER = 0.5
let CHARGE_REMOVE_TIME = 12.
let CHARGE_AS_SLOW = 0.75
let CHARGE_MS_SLOW = 0.75
let CHARGE_SLOW_DURATION_HERO = 2.
let CHARGE_SLOW_DURATION_NORM = 3.
let EFFECT_PATH = Abilities.purgeBuffTarget
let BOUNCE_IMPACT_EFFECT_PATH = Abilities.boltImpact
let TOOLTIP_NORM = "Zap"
let ANIMAL_EXTRA_DAMAGE = 20.
let TOOLTIP_EXTENDED = ("Zaps the target dealing damage equal to your {0}. ".format("Intelligence".color(COLOR_TURQUOISE)) +
                        "Stacks charges on the target and on the third charge, they explode slowing movement and attack "+
                       "speed by {0} and dealing bonus damage equal to {1}% of your {2} and causing another Zap to be cast on other units nearby."+
                       "\nDoes {3} extra damage to animals. "+
                       "\nCharge last {4} seconds. "+
                        "Has {5} seconds cooldown.")
                       .format(CHARGE_AS_SLOW.toToolTipOrange(), (CHARGE_DAMAGE_INT_MULTIPLIER*100).toString().color(COLOR_RED), 
                       "Intelligence".color(COLOR_TURQUOISE), ANIMAL_EXTRA_DAMAGE.toString().color(COLOR_RED),
                       CHARGE_DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

constant ZAP1 = compiletime(createDummyBuffObject("Zap 1", "1 Zap Charge", Icons.bTNStasisTrap, Abilities.farseerMissile, "chest"))
constant ZAP2 = compiletime(createDummyBuffObject("Zap 2", "2 Zap Charge", Icons.bTNStasisTrap, Abilities.farseerMissile, "chest"))


function createBuffs()
    new BuffDefinition(BUFF_ZAP_SLOW, BuffIds.stasisTrap)
    ..setArtTarget(1, "")
    ..setTooltipNormal(1, "Zap Slow")
    ..setTooltipNormalExtended(1, "Slowed by Zap spell")

function createSlowDummySpell()
    new AbilityDefinitionSlowCreep(SLOW_ABILITY_ID)
    ..setArtTarget("")
    ..setArtCaster("")
    ..setAttackSpeedFactor(1, CHARGE_AS_SLOW)
    ..setMovementSpeedFactor(1, CHARGE_MS_SLOW)
    ..setBuffs(1, BUFF_ZAP_SLOW.toRawCode())
    ..setCastRange(1, 1500)
    ..setCastingTime(1, 0)
    ..setCooldown(1, 0)
    ..setDurationHero(1, CHARGE_SLOW_DURATION_HERO)
    ..setDurationNormal(1, CHARGE_SLOW_DURATION_NORM)
    ..setManaCost(1, 0)
    ..setTargetsAllowed(1, "air,allies,enemies,ground")
    ..setName("Zap Dummy Slow")

class Zap extends AbilityDefinitionChainLightningcreep
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setDamageReductionperTarget(1, 0)
        this.setDamageperTarget(1, 0)
        this.setNumberofTargetsHit(1, 1)
        this.setAreaofEffect(1, 1)
        this.setCastRange(1, CAST_RANGE)
        this.setCastingTime(1, 0)
        this.setCooldown(1, COOLDOWN)
        this.setManaCost(1, MANACOST)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        

@compiletime function createZap()
    new Zap(ABILITY_ZAP, "Q", new Pair(0, 0))
    createBuffs()
    createSlowDummySpell()

@compiletime function createZapAutoCast()
    new AbilityDefinitionAuraSlow(ABILITY_ZAP_READY)
        ..setArtTarget(Abilities.farseerMissile)
        ..setTargetAttachmentPoint1("hand,right")
        ..setTargetAttachmentPoint("hand,left")
        ..setTargetAttachments(2)
        ..setBuffs(1, BUFF_ZAP_READY.toRawCode())
        //..setAttackSpeedFactor(1, .99)
        ..setMovementSpeedFactor(1, 0)
        ..setAreaofEffect(1, 0)
        ..setDurationHero(1, 9999)
        ..setDurationNormal(1, 9999)
        ..setTargetsAllowed(1, "self")
        ..setName("Zap auto cast")

    new BuffDefinition(BUFF_ZAP_READY, BuffIds.stasisTrap)
        ..setArtTarget(1, "")
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setTooltipNormalExtended(1, "Your next attack will cast Zap.")
        ..setIcon(Icons.bTNChainLightning)
        ..setIconNormal(1, Icons.bTNChainLightning)
        ..setTargetAttachments(1, 2)

let timerMap = new HashMap<unit, timer>()
let zapAutoCastInstances = new HashMap<unit, ZapAutoCast>()
let treeIdList = asList<int>(DEST_MAGIC_TREE, 'B002', 'B006', 'B003', 'B001', 'B005', 'DM01', 'B005')

class ZapAutoCast
    unit attacker 
    unit target
    //CallbackPeriodic cb 

    construct(unit attacker, unit target)
        this.attacker = attacker
        this.target = target
        disableAttack()

    function disableAttack()
        attacker.disableAttack(true, false)
        attacker.startAbilityCooldown(ABILITY_ZAP)
        attacker.removeAbility(ABILITY_ZAP_READY)
        attacker.removeAbility(BUFF_ZAP_READY)        
        doPeriodically(ANIMATION_PERIOD) cb ->
            if attacker.getAbilityCooldownRemaining(ABILITY_ZAP) <= 0. and attacker.isAlive() and not attacker.hasAbility(ABILITY_ZAP_READY)             
                //efx1 = AddSpecialEffectTargetUnitBJ("hand,right", attacker, Abilities.manaFlareBase)..setColor(0, 0, 255)
                //efx2 = AddSpecialEffectTargetUnitBJ("hand,right", attacker, Abilities.manaFlareBase)..setColor(0, 0, 255)  
                destroy cb      
                enableAtack()   

    function enableAtack()
        //nullTimer() ->      
        attacker.disableAttack(false, false)           
        attacker.addAbility(ABILITY_ZAP_READY)
        attacker.addAbility(BUFF_ZAP_READY)
        //doAfter(ANIMATION_PERIOD*2) ->     
        destroy this

    ondestroy
        zapAutoCastInstances.remove(attacker)
                         


function onCast()
    let caster = GetSpellAbilityUnit()
    if not caster.isTroll()
        return
    let target = GetSpellTargetUnit()
    onCastEffects(caster, target, consumeOvercharge(caster))

function onAttack(unit attacker, unit target)
    //let target = GetAttackedUnitBJ()
    //let attacker = GetAttacker()
    if not attacker.getAbilityCooldownRemaining(ABILITY_ZAP) <= 0.
        return
    if not attacker.hasAbility(ABILITY_ZAP)
        return
    if zapAutoCastInstances.has(attacker)
        return
    let zapLvlv = attacker.getAbilityLevel(ABILITY_ZAP)
    let zapManaCost = attacker.getAbilityManaCost(ABILITY_ZAP, zapLvlv-1)    
    if attacker.getMana()<zapManaCost+5.
        simError(attacker.getOwner(), "Not enough mana.")
        return
    zapAutoCastInstances.put(attacker, new ZapAutoCast(attacker, target))    
      
    new DummyCaster()
        ..owner(attacker.getOwner())
        ..delay(1)
        ..origin(attacker.getPos())
        ..castTarget(ABILITY_ZAP, 1, OrderIds.chainlightning, target)
    onCastEffects(attacker, target, consumeOvercharge(attacker))
    attacker.setMana(attacker.getMana()-zapManaCost)


function handleOverchargeFork(unit caster, unit target)
    //Create new object for counting targets hit inside closure
    var targetsHit = new IntObject(1)
    forUnitsInRange(target.getPos(), OVERCHARGE_FORK_AOE) u ->
        if (isValidTarget(u, caster) and not u == target)
            //Limit hit count
            if targetsHit.value < OVERCHARGE_FORK_AMOUNT
                targetsHit.value = targetsHit.value + 1
                onCastEffects(caster, u, false)
                let targetFX = AddSpecialEffectTargetUnitBJ("origin", u, BOUNCE_IMPACT_EFFECT_PATH)
                let lightningFX = addLightning(LIGHTNING_CHAIN_LIGHTNING_SEECONDARY, true, caster.getPos3Real(), u.getPos3Real())
                doPeriodicallyTimed(0.05, 0.5) ofxUpdater ->
                    lightningFX.move(true, caster.getPos3Real(), u.getPos3Real())
                    if ofxUpdater.isLast()
                        lightningFX.destr()
                        targetFX.destr()

    //Cleanup after closure
    destroy targetsHit

function handleBuff(unit caster, unit target)
    if timerMap.has(target)
        timerMap.getAndRemove(target).release()

    if target.hasAbility(ZAP2.abilId)
        //Zap2 -> Charges explosion
        target.removeAbility(ZAP1.abilId)
        target.removeAbility(ZAP2.abilId)
        zapChargeExplosion(caster, target)
    else if target.hasAbility( ZAP1.abilId )
        //Zap 1 -> 2
        target.removeAbility(ZAP1.abilId)
        target.addAbility(ZAP2.abilId)
        let t = getTimer()
        t.doAfter(CHARGE_REMOVE_TIME) ->
            target.removeAbility(ZAP2.abilId)
            timerMap.remove(target)
        timerMap.put(target, t)

    else
        //0 -> >Zap 1
        target.addAbility(ZAP1.abilId)

        let t = getTimer()
        t.doAfter(CHARGE_REMOVE_TIME) ->
            target.removeAbility(ZAP1.abilId)
            timerMap.remove(target)
        timerMap.put(target, t)

function onCastEffects(unit caster, unit target, bool isOvercharged)
    doAfter(0.08) ->
        //Overcharged spell acts like forked lightning
        if (isOvercharged)
            handleOverchargeFork(caster, target)

        //extra damage to animals
        let animalDamageMultiplier = (HOSTILE_ANIMALS_LIST.has(target.getTypeId()) or target.getTypeId() == UNIT_HAWK) ? ANIMAL_EXTRA_DAMAGE:0.

        //Main target damage
        UnitDamageTarget(caster, target, caster.getInt(true)*MAIN_DAMAGE_INT_MULTIPLIER+animalDamageMultiplier, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
        handleBuff(caster, target)

function zapChargeExplosion(unit caster, unit target)
    //Main target bonus effects
    if (target.isAlive() and not target.isInvulnerable())
        InstantDummyCaster.castTarget(caster.getOwner(), SLOW_ABILITY_ID, 1, Orders.slow, target)
        UnitDamageTarget(caster, target, caster.getInt(true)*CHARGE_DAMAGE_INT_MULTIPLIER, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)

    //Charge explosion SFX
    let efx = AddSpecialEffectTargetUnitBJ("chest", target, EFFECT_PATH)..setScale(0.8)
    doAfter(3)->
        efx.destr()

    //Also zap nearby targets in radius
    zapTargetsInRadius(caster, target, CHARGE_BOUNCE_RADIUS, EXPLOSION_FORK_AMOUNT)

function isValidTarget(unit target, unit caster) returns bool
    return (
        target.isAlive()
        and target.getOwner().isEnemyOf(caster.getOwner())
        and not target.isType(UNIT_TYPE_STRUCTURE)
        and not target.isInvulnerable()
    )

function zapTargetsInRadius(unit caster, unit originalTarget, real radius, int maxTargets)
    let targetPos = originalTarget.getPos3Real()
    let targetsHit = new IntObject(0)
    forUnitsInRange(targetPos.toVec2(), radius) u ->
        if (isValidTarget(u, caster) and not u == originalTarget and targetsHit.value < maxTargets)
            targetsHit.value += 1
            onCastEffects(caster, u, false)
            let targetFX = AddSpecialEffectTargetUnitBJ("origin", u, BOUNCE_IMPACT_EFFECT_PATH)
            let lightningFX = addLightning(LIGHTNING_CHAIN_LIGHTNING_SEECONDARY, true, originalTarget.getPos3Real(), u.getPos3Real())
            doPeriodicallyTimed(0.05, 0.5) fxUpdater ->
                lightningFX.move(true, originalTarget.getPos3Real(), u.getPos3Real())
                if fxUpdater.isLast()
                    lightningFX.destr()
                    targetFX.destr()
    destroy targetsHit

class IntObject
    int value

    construct(int value)
        this.value = value

function enforceMelee(unit target)
    //cancel attack if performed outside of melee range against allies/trees/buildings
    let attacker = GetAttacker()
    let attackerPos = attacker.getPos()
    let targetPos = target.getPos()  
    if not attacker.hasAbility(ABILITY_ZAP)
        return
    let attackRange = max(target.getCollisionSize(), 175.)
    if ((target.isAllyOf(attacker.getOwner()) and not target.getTypeId()==UNIT_FAWN and not target.getTypeId()==UNIT_WOLF_PUP)  
        or treeIdList.has(target.getTypeId()) or target.isStructure()) 
        and attackerPos.distanceTo(targetPos) >attackRange
        attacker.issueImmediateOrder("stop")
        doAfter(ANIMATION_PERIOD) -> 
            moveIntoMeleeAndAttack(attacker, target, attackRange)


function moveIntoMeleeAndAttack(unit attacker, widget target, real attackRange)
    Order currentOrderId = null
    doAfter(ANIMATION_PERIOD) -> 
        attacker.issueTargetOrder("move", target)
        nullTimer() -> 
            currentOrderId = attacker.getLastOrder()
            nullTimer() -> 
                doPeriodically(0.125) (CallbackPeriodic cb) ->
                    if currentOrderId != attacker.getLastOrder()
                        destroy cb
                    if attacker.getPos().distanceTo(target.getPos())<=175.
                        attacker.issueTargetOrder("attack", target)
                        

function enforceMelee(destructable dest)
    if GetIssuedOrderId() !=OrderIds.attack
        return
    if dest == null
        return
    let attacker = GetOrderedUnit()
    let attackerPos = attacker.getPos()
    let destPos = dest.getPos()   
    if not attacker.hasAbility(ABILITY_ZAP)
        return
    if attackerPos.distanceTo(destPos) >150.
        doAfter(ANIMATION_PERIOD) -> 
            moveIntoMeleeAndAttack(attacker, dest, 150.)

function enforceMelee(item itm)
    if GetIssuedOrderId() !=OrderIds.attack
        return
    if itm == null
        return
    let attacker = GetOrderedUnit()
    let attackerPos = attacker.getPos()
    let itmPos = itm.getPos()   
    if not attacker.hasAbility(ABILITY_ZAP)
        return
    if attackerPos.distanceTo(itmPos) >128.
        doAfter(ANIMATION_PERIOD) -> 
            moveIntoMeleeAndAttack(attacker, itm, 128.)

function onDamage()
    
    let attacker = DamageEvent.getSource()
    let target = DamageEvent.getTarget()
    // Filter for units that have Zap.
    if not attacker.hasAbility(ABILITY_ZAP)
        return
    //Enforce melee for buildings
    if (target.isAllyOf(attacker.getOwner()) 
        and not target.getTypeId()==UNIT_FAWN 
        and not target.getTypeId()==UNIT_WOLF_PUP) 
        or not target.isAlive() or treeIdList.has(target.getTypeId())
        enforceMelee(target)
        return
    // Exit if the damage is used for internal systems.
    if DamageEvent.getElement().hasTag(FAKE_DAMAGE)
        return

    DamageEvent.setAmount(0.)
    onAttack(attacker, target)

function onRevive()
    let instance = zapAutoCastInstances.get(GetTriggerUnit())
    if instance == null
        return
    nullTimer() -> 
        instance.enableAtack()

init
    //registerPlayerUnitEvent(EVENT_UNIT_ISSUED_ORDER, ()->onAutoCastToggle())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, () -> enforceMelee(GetAttackedUnitBJ()))
    registerSpellEffectEvent(ABILITY_ZAP, () -> onCast())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, ()->enforceMelee(GetOrderTargetDestructable()))
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, ()->enforceMelee(GetOrderTargetItem()))  
    registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH, ()->onRevive())  
    DamageEvent.addListener(DamageListenerPriorities.PANIC castTo int) ->
        if DamageEvent.getType() == DamageType.ATTACK
            onDamage()
