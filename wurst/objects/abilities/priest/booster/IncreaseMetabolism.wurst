package IncreaseMetabolism

import AbilityObjEditing
import BuffObjEditing
import ObjectIdGenerator
import ObjectIds
import Assets
import HealingSystem
import ToolTipsUtils
import Lodash
import LocalObjectIDs
import ClosureEvents
import HashMap
import ClosureTimers
import ColorUtils

let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let ICON = Icons.bTNAncestralSpirit
let CAST_RANGE = 700.
let COOLDOWN = 60.
let MANACOST = 40
let MS_FACTOR = 0.2
let AS_FACTOR = 0.
let DURATION = 30.
let HEALING_MULTIPLIER = 0.50
let CAST_TIME = 0.2
let INT_MULTIPLIER = 10.
let BASE_EXTRA_HEALING_CAP =100
let TARGET_ALLOWED = "air,ground,friend,organic,self,neutral"
let TOOLTIP_NORM = "Increase Metabolism"
let TOOLTIP_EXTENDED = "Increases the health recovered by food and potions by {0} and boosts movement speed by {1}.".format(HEALING_MULTIPLIER.toToolTipGreen(), MS_FACTOR.toToolTipOrange())+
                        "\nExtra healing is limited to {0}+{1}x{2}".format(BASE_EXTRA_HEALING_CAP.toString().color(COLOR_GREEN), INT_MULTIPLIER.toString().color(COLOR_GREEN), "Intelligence".color(COLOR_TURQUOISE))+
                        "\nLasts {0} seconds, Has {1} seconds cooldown.".format(DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

function createBuff()
    new BuffDefinition(BUFF_ID, BuffIds.bloodlust) // Original ID is BloodLust
    ..setTargetAttachmentPoint0(1, "origin")
    ..setTargetAttachmentPoint1(1, "")
    ..setArtTarget(1, Abilities.faerieDragon_Invis)
    ..setIcon(ICON)
    ..setTooltipNormal(1, TOOLTIP_NORM)
    ..setTooltipNormalExtended(1, "This unit recover more health points when eating meat and run faster.")

HashMap<unit, Metabolism> instances = new HashMap<unit, Metabolism>()

class IncreaseMetabolism extends AbilityDefinitionSlowCreep
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setAttackSpeedFactor(1, -AS_FACTOR)
        this.setMovementSpeedFactor(1, -MS_FACTOR)
        this.setBuffs(1, toRawCode(BUFF_ID))
        this.setIconNormal(ICON)
        this.setCastRange(1, CAST_RANGE)
        this.setCastingTime(1, CAST_TIME)
        this.setCooldown(1, COOLDOWN)
        this.setDurationHero(1, DURATION)
        this.setDurationNormal(1, DURATION)
        this.setManaCost(1, MANACOST)
        this.setTargetsAllowed(1, TARGET_ALLOWED)
        this.setName(TOOLTIP_NORM)
        this.setHotkeyNormal(hotkey)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)

@compiletime function createSpells()
    new IncreaseMetabolism(ABILITY_INCREASE_METABOLISM, "D", new Pair(3, 1))
    new IncreaseMetabolism(ABILITY_SAGE_INCREASE_METABOLISM, "Q", new Pair(0, 0))
    createBuff()

class Metabolism
    real totalExtraHealingRemaining = 0
    unit target = null
    construct(unit caster, unit _target)
        target = _target
        totalExtraHealingRemaining = caster.getInt(true)*INT_MULTIPLIER+BASE_EXTRA_HEALING_CAP

    function onUnitHealed(HealingInstance healingInstance)
        if not target.hasAbility(BUFF_ID)
            destroy this
            return
        let baseAmount = healingInstance.getAmount()
        var extraHealing = min(healingInstance.target.getMissingHP(), baseAmount*(1+HEALING_MULTIPLIER)) - baseAmount
        extraHealing = max(extraHealing, 0)
        totalExtraHealingRemaining-=extraHealing
        healingInstance.scaleMultiplier(HEALING_MULTIPLIER + 1)
        if totalExtraHealingRemaining<=0
            destroy this
        
    ondestroy
        target.removeAbility(BUFF_ID)
        instances.remove(target)



function onCast(unit caster, unit target)
    let instance = instances.get(target)
    if instance == null
        instances.put(target, new Metabolism(caster, target))
        doAfter(DURATION) ->
            if instance != null
                destroy instance 
        

function onHeal(HealingInstance healingInstance)
    if healingInstance.healingType != HealingType.ITEM
        return
    let instance = instances.get(healingInstance.getTarget())
    if instance == null
        return
    instance.onUnitHealed(healingInstance)

init
    EventListener.onTargetCast(ABILITY_INCREASE_METABOLISM) (unit caster, unit target) ->
        onCast(caster, target)
        
    onUnitHealed() ->
        onHeal(getHealingInstance())
