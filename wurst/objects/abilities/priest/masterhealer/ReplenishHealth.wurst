package ReplenishHealth

// Standard library imports:
import AbilityObjEditing
import Assets
import BuffObjEditing
import ObjectIdGenerator
import ObjectIds
import Orders
import RegisterEvents

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils
import ClosureEvents
import HashMap
import ClosureTimers
import HealingSystem
import Tribe
import PlayerExtensions
import UnitExtensions

let BUFF_SELF_ID = compiletime(BUFF_ID_GEN.next())
let BUFF_ID = compiletime(BUFF_ID_GEN.next())

let ABILITY_REPLENISH_HEALTH_EFFECT = compiletime(ABIL_ID_GEN.next())
let AMOUNT_HP_HEALED_BASE = 1.0
let INT_MULTIPLIER = 0.08
let AOE = 500.
let TARGET_ALLOWED = "air,allies,friend,ground,invulnerable,organic,self,vulnerable"

let HEAL_PERIOD = .125
let COOLDOWN = 5.0
let MANA_DRAINED = 10.0
let MANACOST = 20
let TOOLTIP_NORM = "Replenish Health"
let TOOLTIP_EXTENDED = (
    "{0}Sustained manacost:|r {1} per second |n|n"+
    "Replenishes health to the Master Healer and nearby allies, healing {2} health per second. "+
    "|nDrains mana until deactivated."
).format(
    GOLD_COLOR.toColorString(),
    MANA_DRAINED.toToolTipLightBlue(),
    AMOUNT_HP_HEALED_BASE.toToolTipGreen()+" + "+INT_MULTIPLIER.toToolTipGreen()+"x"+"Intelligence".color(COLOR_TURQUOISE)
)

let TT_BUFF_EX = "This unit's health is being replenished."

IterableMap<unit, CallbackPeriodic> instances = new IterableMap<unit, CallbackPeriodic>()
         

function createBuff()
    new BuffDefinition(BUFF_SELF_ID, BuffIds.immolation)
    ..setIcon(Icons.bTNHolyBolt)
    ..setArtSpecial(1, "")
    ..setArtTarget(1, Abilities.aNrmTarget)
    ..setEffectSoundLooping(1, Sounds.fountainOfLifeLoop1)
    ..setTooltipNormal(1, TOOLTIP_NORM)
    ..setTooltipNormalExtended(1, "This unit is replenishing the health of nearby units")

    new BuffDefinition(BUFF_ID, 'Basl')//tornado slow buff
    ..setIcon(Icons.bTNHolyBolt)
    ..setArtSpecial(1, "")
    ..setArtTarget(1, Abilities.aNrmTarget)
    ..setEffectSoundLooping(1, Sounds.fountainOfLifeLoop1)
    ..setTooltipNormal(1, TOOLTIP_NORM.color(COLOR_GREEN))
    ..setTooltipNormalExtended(1, TT_BUFF_EX)




class ReplenishHealth extends AbilityDefinitionAuraRegenerationHealingWard
    construct(int newAbilityId)
        super(newAbilityId)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> TOOLTIP_NORM)
        this.setAmountofHitPointsRegenerated(1, 0.)
        this.setPercentage(1, false)
        this.setAreaofEffect(1, AOE)
        this.setTargetsAllowed(1, TARGET_ALLOWED)





@compiletime function createReplenishHealthAura()
    new AbilityDefinitionAuraSlow(ABILITY_REPLENISH_HEALTH_DUMMY_AURA)
		..setName(TOOLTIP_NORM)
		..setMovementSpeedFactor(1, 0)
		..setBuffs(1, BUFF_ID.toRawCode())
        ..setAreaofEffect(1, AOE)
		..presetIcon(Icons.bTNHolyBolt)
		..setArtTarget("")
		..setTargetsAllowed(1, TARGET_ALLOWED)
		..setEditorSuffix("wurst")
        ..setTooltipNormal(1, makeToolTipNorm("D", "Activate "+TOOLTIP_NORM))
        ..setTooltipNormalExtended(1, TOOLTIP_EXTENDED)

class ReplenishHealthDummy extends AbilityDefinitionImmolationcreep
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setCheckDependencies(false)
        this.setDamageperInterval(1, 0)
        this.setManaDrainedperSecond(1, MANA_DRAINED)
        this.setBufferManaRequired(1, 0)
        this.setIconNormal(Icons.bTNHolyBolt)
        this.setIconTurnOff(Icons.dISBTNHolyBolt)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setBuffs(1, toRawCode(BUFF_SELF_ID))
        this.setTargetsAllowed(1, "")
        this.setCooldown(1, COOLDOWN)
        this.setAreaofEffect(1, 1)
        this.setHeroAbility(false)
        this.setLevels(1)
        this.setAreaofEffect(1, 1)
        this.setManaCost(1, MANACOST)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, "Activate "+TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setTooltipLearnExtended(TOOLTIP_EXTENDED)
        this.setTooltipTurnOffExtended(1, TOOLTIP_EXTENDED)
        this.setTooltipTurnOff(1, makeToolTipNorm(hotkey, "Deactivate "+TOOLTIP_NORM))
        this.setHotkeyNormal(hotkey)
        this.setHotkeyTurnOff(hotkey)


@compiletime function createReplenishHealth()
    new ReplenishHealthDummy(ABILITY_REPLENISH_HEALTH, "D", new Pair(3, 1))
    new ReplenishHealth(ABILITY_REPLENISH_HEALTH_EFFECT)
    createBuff()


function onCast()
    let caster = GetTriggerUnit()
    let TOTAL_HP_HEALED = AMOUNT_HP_HEALED_BASE+caster.getInt(true)*INT_MULTIPLIER
    if not caster.hasAbility(ABILITY_REPLENISH_HEALTH)
        return
    switch GetIssuedOrderId()
        case Orders.immolation
            let cb = doPeriodically(HEAL_PERIOD) (CallbackPeriodic cb) ->
                for each in caster.getOwner().getTribe().getMembers()                  
                    if each.getTroll().hasAbility(BUFF_ID)
                        new HealingInstance(each.getTroll(), caster, TOTAL_HP_HEALED*HEAL_PERIOD, HealingType.ABILITY, false)
            instances.put(caster, cb)                           
            caster.addAbility(ABILITY_REPLENISH_HEALTH_DUMMY_AURA)
        case Orders.unimmolation
            let instance = instances.getAndRemove(caster)
            if instance == null
                return
            destroy instance
            caster.removeAbility(ABILITY_REPLENISH_HEALTH_DUMMY_AURA)

function onDeath()
    let caster = GetTriggerUnit()
    if caster.hasAbility(ABILITY_REPLENISH_HEALTH_DUMMY_AURA)
        caster.removeAbility(ABILITY_REPLENISH_HEALTH_DUMMY_AURA)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, function onCast)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onDeath)