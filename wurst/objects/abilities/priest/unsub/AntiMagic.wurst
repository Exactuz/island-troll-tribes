package AntiMagic
import ClosureEvents
import ClosureForGroups
import DummyCaster
import Orders
import ChannelAbilityPreset
import Assets
import LocalObjectIDs
import Lodash
import ToolTipsUtils
import ColorUtils

let AOE = 600.
let COOLDOWN = 20.
let MANACOST = 20
let DURATION = 10.
let CAST_RANGE = 600.
let BASE_SHIELD_AMOUNT = 20.
let SHIELD_INT_MULTIPLIER = 1.
let SINGLE_AM_MANACOST = 5
let SINGLE_AM_COOLDOWN = 1.
let SINGLE_AM_TOOLTIP_NORM = "Anti-Magic Shell"
let SINGLE_AM_TOOLTIP_EXTENDED = (
    "Grants an anti-magic barrier to target ally that absorbs {0} + {1}% of your {2} magic damage and blocks them ".format(
        BASE_SHIELD_AMOUNT.toToolTipGreen(),
        (SHIELD_INT_MULTIPLIER*100).toToolTipGreen(),
        "Intelligence".color(COLOR_TURQUOISE)
    ) +
    "from being ensnared by hunters or ensnare traps. \nLasts {0} seconds, has {1} seconds cooldown.")
    .format(
        DURATION.toToolTipLightBlue(),
        SINGLE_AM_COOLDOWN.toToolTipLightBlue()
    )


let TOOLTIP_NORM = "Anti-Magic Shell"
let TOOLTIP_EXTENDED = (
    "Grants an anti-magic barrier to allies in a {0} radius around point cast that absorbs magic damage equal to {0} + {1}% of your {2} and blocks them ".format(
        BASE_SHIELD_AMOUNT.toToolTipGreen(),
        (SHIELD_INT_MULTIPLIER*100).toToolTipGreen(),
        "Intelligence".color(COLOR_TURQUOISE)
    ) + 
    "from being ensnared by hunters or ensnare traps. \nLasts {0} seconds, has {1} seconds cooldown.")
    .format(
        DURATION.toToolTipLightBlue(),
        SINGLE_AM_COOLDOWN.toToolTipLightBlue()
    )

class AntiMagic extends AbilityDefinitionAntimagicShield
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setRequirements("")
        this.setCheckDependencies(false)
        this.setLevels(80)
        this.presetShieldLife(lvl-> (BASE_SHIELD_AMOUNT+lvl).toInt())
        this.presetManaCost(lvl-> SINGLE_AM_MANACOST)
        this.presetCastRange(lvl-> CAST_RANGE)
        this.presetDurationHero(lvl-> DURATION)
        this.presetDurationNormal(lvl-> DURATION)
        this.setName(SINGLE_AM_TOOLTIP_NORM)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, SINGLE_AM_TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, SINGLE_AM_TOOLTIP_EXTENDED)
        this.presetCooldown(lvl-> SINGLE_AM_COOLDOWN)
        this.presetHotkey(hotkey)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)

class AntiMagicAoEDummy extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.presetCastRange(lvl -> CAST_RANGE)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> COOLDOWN)
        this.setHeroAbility(false)
        this.setItemAbility(false)
        this.presetTargetTypes(Targettype.POINT)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.setBaseOrderID(1, "devourmagic")
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setIconNormal(Icons.bTNAntiMagicShell)
        this.setIconTurnOff(Icons.bTNAntiMagicShell)
        this.setIconResearch(Icons.bTNAntiMagicShell)
        this.presetOption(Option.TARGETIMAGE, true)
        this.presetAreaofEffect(lvl -> AOE)
        this.setFollowThroughTime(1, 1)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)

@compiletime function createAntiMagic()
    new AntiMagic(ABILITY_ANTI_MAGIC, "Q", new Pair(0, 0))
    new AntiMagicAoEDummy(ABILITY_ANTI_MAGIC_AOE, "Q", new Pair(0, 0))


init
    EventListener.onPointCast(ABILITY_ANTI_MAGIC_AOE) (unit caster, vec2 target) ->
        let amsLevel = caster.getInt(true)
        forUnitsInRange(target, AOE) u ->
            if u.isAlive()
                and u.getOwner().isAllyOf(caster.getOwner())
                and u.getOwner() != players[PLAYER_NEUTRAL_PASSIVE]
                and not u.isHidden()
                and not u.isType(UNIT_TYPE_STRUCTURE)
                new DummyCaster()
                    ..owner(caster.getOwner())
                    ..origin(target)
                    ..castTarget(ABILITY_ANTI_MAGIC, amsLevel, Orders.antimagicshell, u)
