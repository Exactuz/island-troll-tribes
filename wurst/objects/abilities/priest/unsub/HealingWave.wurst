package HealingWave

// Standard Lib Import:
import ClosureEvents
import ClosureTimers
import Assets
import LinkedList
import MapBounds
import ChannelAbilityPreset

// Third Party Dependencies
import Lodash

// Local Import :
import HealingSystem
import LightningUtils
import LocalObjectIDs
import ToolTipsUtils
import ColorUtils

//let ABILITY_ID = 'XPHW'
let CAST_RANGE = 6000.
let BOUNCE_SEARCH_RANGE = 6000.
let COOLDOWN = 20.
let MANACOST = 10
let BASE_HEAL_AMOUNT = 15.
let HEAL_INT_MULTIPLIER = 0.8
let HEAL_REDUCTION_BOUNCE_FACTOR = 0.2  
let BOUNCE_COUNT = 3.
let TOOLTIP_NORMAL = "Healing wave"
let TOOLTIP_NORMAL_EXT = ("Calls forth a wave of healing energy that bounces up to {0} times, restoring health equal to {1} + {2}% of your {3} to the primary target. ".format(
                        BOUNCE_COUNT.toToolTipOrange(), BASE_HEAL_AMOUNT.toToolTipGreen(), (HEAL_INT_MULTIPLIER*100).toToolTipGreen(), "Intelligence".color(COLOR_TURQUOISE)) +
                        "Each jump heals {0} less. Bounces on an extremely large range. \nHas {1} seconds cooldown.")
                        .format(HEAL_REDUCTION_BOUNCE_FACTOR.toToolTipOrange(), COOLDOWN.toToolTipLightBlue())
let HEALING_WAVE_HIT_FX = Abilities.healingWaveTarget
let HEAL_HIT_FX = Abilities.healTarget

class HealingWave extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.presetCastRange(lvl -> CAST_RANGE)
        this.presetFollowThroughTime(lvl -> 0.275)
        this.presetCooldown(lvl -> COOLDOWN)
        this.presetManaCost(lvl -> MANACOST)
        this.presetTargetType(lvl -> 1)
        this.presetTargetsAllowed(lvl -> "air,ground,friend,self,vuln,invu,organic")
        this.setHeroAbility(false)
        this.setBaseOrderID(1, "healingwave")
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORMAL)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORMAL))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_NORMAL_EXT)
        this.setIconNormal(Icons.bTNHealingWave)

@compiletime function createHealingWave()
    new HealingWave(ABILITY_HEALING_WAVE, "S", new Pair(1, 1))
    new HealingWave(ABILITY_MH_HEALING_WAVE, "E", new Pair(2, 0))
    new HealingWave(ABILITY_SAGE_HEALING_WAVE, "D", new Pair(2, 1))

class HealingWaveInstance
    unit caster
    player owner
    int bouncesLeft
    real healingAmount
    LinkedList<unit> targetsHit = new LinkedList<unit>()

    construct(unit caster, unit target, real healingInitialAmount, int bounces)
        this.caster = caster
        this.healingAmount = healingInitialAmount
        this.bouncesLeft = bounces
        this.owner = caster.getOwner()
        waveBounce(target, caster, true)

    function waveBounce(unit target, unit previousTarget, bool isFirstBounce)
        new HealingInstance(target, this.caster, this.healingAmount, HealingType.ABILITY)

        let lightningFxPath = isFirstBounce ? LIGHTNING_HEALING_WAWE_PRIMARY : LIGHTNING_HEALING_WAWE_SEECONDARY
        attachLightningFX(previousTarget, target, lightningFxPath, 1.5)

        let fx1 = addEffect(HEALING_WAVE_HIT_FX, target.getPos3Real())
        let fx2 = target.addEffect(HEAL_HIT_FX, "origin")
        doPeriodicallyTimed(ANIMATION_PERIOD, 1.5) fxUpdater ->
            fx1.setPos(target.getPos3Real())
            if fxUpdater.isLast()
                fx1.setPos(boundMax)
                fx1.destr()
                fx2.destr()

        this.healingAmount *= 1 - HEAL_REDUCTION_BOUNCE_FACTOR
        this.bouncesLeft -= 1
        this.targetsHit.add(target)
        if this.bouncesLeft > 0
            doAfter(0.3) ->
                let nextTarget = findBounceTarget(target)
                if nextTarget != null
                    waveBounce(nextTarget, target, false)
                else
                    destroy this
        else
            destroy this

    function findBounceTarget(unit bounceOrigin) returns unit
        let units = CreateGroup()
            ..enumUnitsInRange(bounceOrigin.getPos(), BOUNCE_SEARCH_RANGE)

        unit nearest = null
        var closestDistance = REAL_MAX
        for u in units
            if isValidTarget(u)
                let distance = u.getPos().distanceTo(bounceOrigin.getPos())
                if distance < closestDistance
                    nearest = u
                    closestDistance = distance

        units.destr()
        return nearest

    function isValidTarget(unit target) returns bool
        return target.isAlive()
            and target.getOwner().isAllyOf(this.owner)
            and not target.getOwner() == players[PLAYER_NEUTRAL_PASSIVE]
            and not target.isType(UNIT_TYPE_STRUCTURE)
            and not target.isType(UNIT_TYPE_MECHANICAL)
            and not targetsHit.has(target)
            and not target.getHP().round() == target.getMaxHP().round()

    ondestroy
        destroy this.targetsHit

function onCast(unit caster, unit target)
    let totalHealAmount = BASE_HEAL_AMOUNT+caster.getInt(true)
    new HealingWaveInstance(caster, target, totalHealAmount, BOUNCE_COUNT.toInt())

init
    EventListener.onTargetCast(ABILITY_HEALING_WAVE, (unit caster, unit target) ->  onCast(caster, target))
    EventListener.onTargetCast(ABILITY_MH_HEALING_WAVE, (unit caster, unit target) ->  onCast(caster, target))
    EventListener.onTargetCast(ABILITY_SAGE_HEALING_WAVE, (unit caster, unit target) ->  onCast(caster, target))
