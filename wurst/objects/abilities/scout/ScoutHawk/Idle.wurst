package Idle

import Icons
import ClosureEvents
import Orders
import ToolTipsUtils
import LocalObjectIDs
import ChannelAbilityPreset
import Lodash
import InstantDummyCaster
import ClosureForGroups
import ErrorHandling
import HashMap
import ClosureTimers
import Classes
import LinkedList
import ClosuresForItems
import GameStates
import PlayerExtensions
import Radars
import PingHerbs
import UnitIds
import initlater ScoutHawk
import StateMachine
import initlater Returning

public class Idle extends HawkState
    unit target
    unit hawk
    unit troll
    real radians
    real hawkCirclingArea  = 800.
    real maxLeashRange = 600.
    vec3 pos
    vec3 trollPos
    ScoutHawk scoutHawkInstance
    real elapsedTime
    construct(HawkStates state, ScoutHawk _scoutHawkInstance)
        super(state)
        //print("idle constructed")
        scoutHawkInstance = _scoutHawkInstance  
        hawk = scoutHawkInstance.hawk
        troll = scoutHawkInstance.troll

    override function updateState()
        if queuedState != null
            return    
        if scoutHawkInstance == null
            return
        radians-=0.03
        pos = trollPos
        let distance = hawk.getPos().distanceTo(troll.getPos())
        if distance >= maxLeashRange
            queuedState = new Returning(HawkStates.returning, scoutHawkInstance)
            //print("changed state to returning")
            return
        pos.z+=300
        pos.x +=hawkCirclingArea/2*radians.cos()
        pos.y +=hawkCirclingArea/2*radians.sin()
        hawk.setPosFly(pos)
        hawk.setFacing(angle(radians+Deg2Rad(-100.))) 


    override function enterState()
        trollPos = troll.getPos3Real()
        //trollPos.z += 300.
        radians = troll.getPos().angleTo(hawk.getPos()).radians()// -hawk.getPos().angleTo(troll.getPos()).radians()
        ////print("radians = "+radians.toString())
        //print("idle enter state")
        hawk = scoutHawkInstance.hawk
        troll = scoutHawkInstance.troll

    override function exitState()
        //print("destroy idle")
        //destroy this

    ondestroy
        //print("destroyed idle")

