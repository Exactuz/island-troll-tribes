package Rescue


import Icons
import ClosureEvents
import Orders
import ToolTipsUtils
import LocalObjectIDs
import ChannelAbilityPreset
import Lodash
import InstantDummyCaster
import ClosureForGroups
import ErrorHandling
import HashMap
import ClosureTimers
import Classes
import LinkedList
import ClosuresForItems
import GameStates
import PlayerExtensions
import Radars
import PingHerbs
import UnitIds
import initlater ScoutHawk
import StateMachine
import initlater Idle
import initlater Swoop
import SoundUtils
import JumpSystem
import TerrainUtils
import Abilities

let FLIGHT_SPEED_PER_TICK = 25.
let FLIGHT_HEIGHT = 500.
public let RESCUE_MAX_RANGE = 900.
public let HAWK_RESCUE_COOLDOWN = 40.

public class Rescue extends HawkState
    unit target
    unit hawk
    unit troll
    real speedPerTick
    vec2 currentPos
    vec2 targetPointPos
    vec3 targetPos
    real totalTicks = 0
    real zOffsetHawk = 0
    real zOffsetTarget = 0
    int currentTicks = 0
    ScoutHawk scoutHawkInstance
    SwoopTargets swoopTargetType
    
    construct(HawkStates state, ScoutHawk _scoutHawkInstance, unit _target, vec2 _targetPointPos, SwoopTargets _swoopTargetType)
        super(state)
        //print("Rescue constructed")
        swoopTargetType =_swoopTargetType
        scoutHawkInstance = _scoutHawkInstance 
        target = _target
        hawk = scoutHawkInstance.hawk
        troll = scoutHawkInstance.troll

        targetPointPos = getJumpPos(troll.getPos(), _targetPointPos, RESCUE_MAX_RANGE)        

    override function updateState()
        if queuedState != null
            return
        if scoutHawkInstance == null
           // //print("null")
            return
        currentTicks+=1
        let pos = target == null ? troll.getPos() : targetPointPos
        if currentPos.distanceTo(pos)<25.
            queuedState = new Idle(HawkStates.idle, scoutHawkInstance)
            //print("changed next state to Idle")
            return
        ////print("fetchSmalAnimal update") 
        setHawkPos()
        setTargetPos()  


    function setHawkPos()
        let pos = target == null ? troll.getPos() : targetPointPos
        currentPos = hawk.getPos()
        let newPos2 = currentPos.moveTowards(pos, FLIGHT_SPEED_PER_TICK)
        var newPos3 = newPos2.toVec3()
        if zOffsetHawk<FLIGHT_HEIGHT and (currentTicks/totalTicks)<0.7
            zOffsetHawk+=40.
        if (currentTicks/totalTicks)>0.7
            zOffsetHawk = max(zOffsetHawk-30, 100.)        
        newPos3.z=zOffsetHawk  
        hawk.setPosFly(newPos3)
        hawk.setFacing(currentPos.angleTo(targetPointPos))
        currentPos=newPos2

    function setTargetPos()
        targetPos = hawk.getPos3Real()
        if (currentTicks/totalTicks)<0.7
            zOffsetTarget = max(zOffsetHawk-30, 0.)
        else
            zOffsetTarget= max(zOffsetHawk-30, 0.)
        targetPos.z=zOffsetTarget
        target.setPosReal(targetPos)
        target.setFacing(currentPos.angleTo(targetPointPos))

    override function enterState()
        totalTicks = (target.getPos().distanceTo(targetPointPos)/FLIGHT_SPEED_PER_TICK)
        target.setPathing(false)
        
        //print("Rescue enter state")
        //target.addAbility('Aloc') 
        target.addAbility(CROWFORM_ID)       
        hawk = scoutHawkInstance.hawk
        troll = scoutHawkInstance.troll

    override function exitState()
        if targetPointPos.isTerrainShallowWater()
            flashEffect(Abilities.crushingWaveDamage, targetPos)    
        //target.removeAbility('Aloc')
        target.setFlyHeight(0., 0)
        target.removeAbility(CROWFORM_ID)
        target.setPathing(true)
        //doAfter(ANIMATION_PERIOD) ->
            //target.kill() 
           // troll.damageTarget(target, 45, true, false, ATTACK_TYPE_NORMAL , DAMAGE_TYPE_NORMAL, null)
        //print("destroy Rescue")
        //destroy this

function onRescuePointCast(unit caster, vec2 target)
    let instance = scoutHawkInstances.get(caster)
    if instance == null
        return
    if GetSpellTargetUnit()!= null
        return
    ////print("onRescuePointCast")
    instance.stateMachine.onRescuePointCast(caster, target, instance)        

function onRescueTargetCast(unit caster, unit target)
    if caster == null or target == null
        return
    let instance = scoutHawkInstances.get(caster)
    if instance == null
        return
    ////print("onRescueTargetCast")
    instance.stateMachine.onRescueTargetCast(target, instance)   

init
    EventListener.onPointCast(ABILITY_HAWK_RESCUE) (unit caster, vec2 target) ->
        onRescuePointCast(caster, target)

    EventListener.onTargetCast(ABILITY_HAWK_RESCUE) (unit caster, unit target) ->
        onRescueTargetCast(caster, target)        

