package ThiefsPocket

import Classes
import LocalObjectIDs
import HashMap
import OnUnitEnterLeave
import Items
import LocalAssets
import UnitExtensions
import ChannelAbilityPreset
import Orders
import ClosureEvents
import ClosureTimers
import InventoryEvent
import HashSet
import BushSpawns
import ItemObjEditing
import ClosuresForItems
import ItemExtensions
import IdListConstant
import ColorUtils
//import Steal


public IterableMap<unit, ThiefsPocket> instances = new IterableMap<unit, ThiefsPocket>()


public let stolenItems = new HashSet<item>()

let TT_NAME = "A Thief's pocket"
let TT_TOOLTIP = "Thief has a secret pocket granting him an extra slot. \nThief's pocket can only hold items that are stolen or come from thief's bush."

@compiletime function createDummyItem() returns ItemDefinition
    return createBasicItem(ITEM_THIEFS_POCKET_DUMMY)
            ..setName(TT_NAME)
            ..setInterfaceIcon(LocalIcons.bTNThiefPouch)
            ..setDroppedWhenCarrierDies(false)
            ..setTooltipExtended(TT_TOOLTIP)

@compiletime function createThiefsPocketDummyAbility() returns AbilityDefinitionHardenedSkin
    return new AbilityDefinitionHardenedSkin(ABILITY_THIEFS_POCKET)
        ..setIconNormal(LocalIcons.bTNThiefPouch)
        ..setButtonPositionNormalY(1)
        ..setCheckDependencies(false)
        ..setChancetoReduceDamage(1, 0)
        ..setIgnoredDamage(1, 0.)
        ..setMinimumDamage(1, 0.)
        ..setEditorSuffix("(Wurst)")
        ..setHotkeyNormal("")
        ..setName(TT_NAME)
        ..setRequirements("")
        ..setTooltipNormal(1, TT_NAME)
        ..setTooltipNormalExtended(1, TT_TOOLTIP)


class ThiefsPocket
    unit hero = null
    HashSet<unit> robbedTradingShips = new HashSet<unit>()
    item dummy = null
    bool suspendTriggersFlag = false
    bool onTargetOrderFlag = true
    bool onItemMoveFlag = true
    bool onItemPickUpFlag = false
    bool onItemDroppedFlag = true
    bool onHeroReviveFlag = true
    bool onHeroDeathFlag = true
    bool onDummyItemDropFlag = false

    construct(unit hero)
        this.hero = hero
        dummy = createItem(ITEM_THIEFS_POCKET_DUMMY, hero.getPos())
        dummy.setVisible(false)
        nullTimer() -> 
            hero.addItemHandleToSlot(dummy, 5)
        generateStartingItem()    

    function addRobbedShip(unit target)
        robbedTradingShips.add(target)

    function generateStartingItem()
        doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
            if hero.isAlive() and not hero.isPaused()
                let itm =generateThiefsBushItem(hero)
                stolenItems.add(itm)
                //print("added starting item")
                nullTimer() -> 
                    hero.addItemHandle(itm)
                destroy cb

    function updateDummySlot()
        if updateThiefsPocket()
            return
        if hero.hasItem(dummy)
            //print("hero has dummy")
            return
        suspendTriggersFlag = true        
        if hero.isInventoryFull()
            //print("removed item from slot 5")
            hero.removeItemFromSlot(5)
        nullTimer() ->
            //print("added dummy")
            hero.addItemHandle(dummy)
            suspendTriggersFlag = false

    function updateThiefsPocket() returns bool  
        var dummyslot = -1
        dummyslot = hero.getItemSlot(dummy)
        for each in hero.getInventory()
            if stolenItems.has(each)
                suspendTriggersFlag = true
                hero.removeItem(dummy)
                nullTimer() ->
                    if dummyslot>=0
                        hero.removeItem(each)
                        nullTimer() ->     
                            hero.addItemHandleToSlot(each, dummyslot) 
                            suspendTriggersFlag = false
                    else
                        suspendTriggersFlag = false
                    dummy.setVisible(false)   
                return true           
        return false

    function onTargetOrder(item itemHandle)
        suspendTriggersFlag = true
        let dummyslot = hero.getItemSlot(dummy)    
        hero.removeItem(dummy)
        suspendTriggersFlag = false 
        nullTimer() -> 
            hero.addItemHandleToSlot(itemHandle, dummyslot)
            stolenItems.add(itemHandle)
            dummy.setVisible(false)
            nullTimer() ->  
                updateDummySlot()


function onUnitEnter(unit troll)
    if troll.getTrollBaseClass() == UNIT_THIEF
        if not instances.has(troll)
            instances.put(troll, new ThiefsPocket(troll))

                

function onItemPickup(unit troll, item manipulatedItem)
    let instance = instances.get(troll)
    if instance == null
        return
    if instance.suspendTriggersFlag == true
        //print("onItemPickUpFlag "+instance.onItemPickUpFlag.toString())
        return
    if not stolenItems.has(manipulatedItem)
        //print("not a stolen item")    
        return
    instance.updateDummySlot()

function onDummyItemDrop(unit troll, item manipulatedItem)
    let instance = instances.get(troll)
    if instance == null
        return
    if manipulatedItem.getTypeId()!= ITEM_THIEFS_POCKET_DUMMY and (not stolenItems.has(manipulatedItem))
        return
    if instance.suspendTriggersFlag == true
        //print("onDummyItemDropFlag "+instance.onDummyItemDropFlag.toString())
        return
    //print("onDummyItemDrop")
    if manipulatedItem.getTypeId() == ITEM_THIEFS_POCKET_DUMMY
        nullTimer() -> 
            manipulatedItem.setVisible(false)

    nullTimer() -> 
        instance.updateDummySlot()


function onItemDropped(unit troll, item manipulatedItem)
    let orderItm = GetOrderTargetItem()
    let slotFrom = troll.getItemSlot(orderItm)    
    let instance = instances.get(troll)
    if instance == null
        return
    //if manipulatedItem.getTypeId()!= ITEM_THIEFS_POCKET_DUMMY and (not stolenItems.has(manipulatedItem))
       // return
    if instance.suspendTriggersFlag == true
        //print("onDummyItemDropFlag "+instance.onDummyItemDropFlag.toString())
        return
    //print("onDummyItemDrop")
    if manipulatedItem.getTypeId() == ITEM_THIEFS_POCKET_DUMMY
        nullTimer() -> 
            manipulatedItem.setVisible(false)
            
    nullTimer() -> 
        instance.updateDummySlot()


function onDeath(unit troll)
    doPeriodicallyTimed(ANIMATION_PERIOD, 0.5) (CallbackCounted cb) ->
        let foundDummyItem = findNearestItem(troll.getPos(), 100., i -> i.getTypeId() == DUMMY_ITEM_ID)
        if foundDummyItem != null
            foundDummyItem.remove()    

function onTargetOrder()
    let order = GetIssuedOrderId()
    let u = GetOrderedUnit()
    let instance = instances.get(u)
    let target = GetOrderTargetItem()
    if instance == null
        return
    if instance.suspendTriggersFlag == true
        return
    if order != Orders.smart or not u.isInventoryFull() or not instances.has(u)
        return
    if not stolenItems.has(target)
        return
    // Smart pickup system -> simulate picking up meat like an item if full inventory, like in Bannars StackNSplit system
    // Used to pick up ammo even if inventory's full
    // TODO: Currently only work when troll is in pick up range, make it so the troll move toward ammo even if inventory is full
    if (target != null
        and target.isPickupable()
        and u.hasItemById(ITEM_THIEFS_POCKET_DUMMY))
        let collisionSize = u.getCollisionSize()
        let rangeSq = (150.0 + collisionSize).pow(2)
        if u.getPos().distanceToSq(target.getPos()) <= rangeSq
            instance.onTargetOrder(target)


function onRevive(unit troll)
    let instance = instances.get(troll)
    if instance == null
        return
    if instance.suspendTriggersFlag == true
        return
    instance.updateDummySlot()


public function generateThiefsBushItem(unit caster) returns item
    let itm = thiefsBush.getItem(caster.getPos())
    return itm

function addStolenItem(item itm)
    stolenItems.add(itm)
    let tt = itm.getDescription()
    itm.setDescription(tt+"\nStolen".color(COLOR_RED))

function increaseAbilityLvl(unit target)
    if target.getTypeId() == UNIT_THIEF
        let lvl = target.getLevel()
        if lvl <=4
            target.setAbilityLevel(ABILITY_CLOAK, lvl-1)
    if target.getTypeId() == UNIT_ASSASSIN
        let lvl = min(4, target.getLevel())
        target.setAbilityLevel(ABILITY_ASSASSINATE, lvl)

init
    onEnter(()->onUnitEnter(getEnterLeaveUnit()))

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrder())  

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatingUnit().getTypeId() == UNIT_THIEFS_BUSH
            addStolenItem(GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatingUnit().getTypeId().getTrollBaseClass() == UNIT_THIEF
            onItemPickup(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatingUnit().getTypeId().getTrollBaseClass() == UNIT_THIEF
            onItemDropped(GetManipulatingUnit(), GetManipulatedItem())

    registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL) ->
        increaseAbilityLvl(GetTriggerUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        if GetTriggerUnit().getTrollBaseClass()==UNIT_THIEF
            onRevive(GetTriggerUnit())        
        


