package HealingItems

// Standard Lib Imports:
import HashMap
import ClosureEvents
import Assets
import ObjectIdGenerator
import ObjectIds
import ItemObjEditing

// Local Imports:
import Items
import HealingSystem
import LocalObjectIDs
import LocalAssets
import ToolTipsUtils
import HealingPotion
import StandardTextTags
import Orders
import UnitExtensions

public constant ABIL_MEAT   = compiletime(ABIL_ID_GEN.next())
public constant ABIL_BANANA = compiletime(ABIL_ID_GEN.next())
public constant ABIL_HONEY  = compiletime(ABIL_ID_GEN.next())
public constant ABIL_COCONUT = compiletime(ABIL_ID_GEN.next())

constant MEAT_ICON   = Icons.bTNMonsterLure
constant BANANA_ICON = LocalIcons.bTNBanana
constant HONEY_ICON  = LocalIcons.bTNHoneycomb

constant MEAT_MODEL   = LocalItems.ham
constant BANANA_MODEL = LocalItems.banana
constant HONEY_MODEL  = LocalItems.honeycomb

public constant MEAT_HEAL   = 50.
public constant BANANA_HEAL = 38.
public constant HONEY_HEAL  = 90.
public constant COCONUT_HEAL = 30.
public constant COCONUT_MANA = 30.

public let FOOD_ITEMS_HEAL_AMOUNT = new IterableMap<int,real>()
    ..put(ITEM_COOKED_MEAT, MEAT_HEAL)
    ..put(ITEM_BANANA, BANANA_HEAL)
    ..put(ITEM_HONEYCOMB, HONEY_HEAL)
    ..put(ITEM_COCONUT, COCONUT_HEAL)


constant TT_MEAT  = "A well done steak. Instantly heals {0} health point on use.".format(MEAT_HEAL.toToolTipGreen())
constant TT_BANANA = "A banana left by an animal. Restores {0} health point on use.".format(BANANA_HEAL.toToolTipGreen())
constant TT_HONEY = "A portion of honeycomb left by an animal. Restores {0} health point on use.".format(HONEY_HEAL.toToolTipGreen())
constant TT_COCONUT = "A refreshing coconut. Restores {0} health and {1} mana point on use.".format(COCONUT_HEAL.toToolTipGreen(), COCONUT_MANA.toToolTipBlue())

@compiletime function createHealingItems()
    createItemBerserkCast(ABIL_MEAT)
        ..setName("Cooked Meat Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

    createItemBerserkCast(ABIL_BANANA)
        ..setName("Banana Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

    createItemBerserkCast(ABIL_HONEY)
        ..setName("Honeycomb Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

    createItemBerserkCast(ABIL_COCONUT)
        ..setName("Coconut")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

@compiletime function createCookedMeat() returns ItemDefinition
    return createPerishableItem(ITEM_COOKED_MEAT)
        ..setInterfaceIcon(Icons.bTNMonsterLure)
        ..setModelUsed(LocalItems.ham)
        ..setName("Cooked Meat")
        ..setTooltipExtended(TT_MEAT)
        ..setDescription(TT_MEAT)
        ..setLumberCost(2)
        ..setScalingValue(0.85)
        ..setTintingColor1Red(255)
        ..setTintingColor2Green(160)
        ..setTintingColor3Blue(125)
        ..setAbilities(ABIL_MEAT.toRawCode())
        ..setCooldownGroup(ABIL_MEAT.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

@compiletime function createBanana() returns ItemDefinition
    return createPerishableItem(ITEM_BANANA)
        ..setInterfaceIcon(BANANA_ICON)
        ..setModelUsed(BANANA_MODEL)
        ..setName("Banana")
        ..setTooltipExtended(TT_BANANA)
        ..setDescription(TT_BANANA)
        ..setLumberCost(2)
        ..setScalingValue(0.8)
        ..setAbilities(ABIL_BANANA.toRawCode())
        ..setCooldownGroup(ABIL_BANANA.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

@compiletime function createHoneycomb() returns ItemDefinition
    return createPerishableItem(ITEM_HONEYCOMB)
        ..setInterfaceIcon(HONEY_ICON)
        ..setModelUsed(HONEY_MODEL)
        ..setName("Honeycomb")
        ..setTooltipExtended(TT_HONEY)
        ..setDescription(TT_HONEY)
        ..setLumberCost(10)
        ..setScalingValue(0.8)
        ..setAbilities(ABIL_HONEY.toRawCode())
        ..setCooldownGroup(ABIL_HONEY.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

@compiletime function createCoconut() returns ItemDefinition
    return createPerishableItem(ITEM_COCONUT)
        ..setInterfaceIcon(LocalIcons.bTNCoconut)
        ..setModelUsed(LocalItems.coconut)
        ..setName("Coconut")
        ..setTooltipExtended(TT_COCONUT)
        ..setDescription(TT_COCONUT)
        ..setLumberCost(2)
        ..setScalingValue(0.75)
        ..setAbilities(ABIL_COCONUT.toRawCode())
        ..setCooldownGroup(ABIL_COCONUT.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

HashMap<int, real> itemTargetedHealAmount = null


function initHealAbilityTable()
    itemTargetedHealAmount = new HashMap<int,real>()
    itemTargetedHealAmount.put(ABIL_MEAT, MEAT_HEAL)


function onSelfHealItem()
    let itm = GetManipulatedItem()
    let itemId = itm.getTypeId()
    let user = GetManipulatingUnit()
    if FOOD_ITEMS_HEAL_AMOUNT.has(itemId)
        new HealingInstance(user, FOOD_ITEMS_HEAL_AMOUNT.get(itemId), HealingType.ITEM)

function onSpellEffect()
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()
    let spellId = GetSpellAbilityId()

    if itemTargetedHealAmount.has(spellId)
        new HealingInstance(target, caster, itemTargetedHealAmount.get(spellId), HealingType.ITEM)

function doubleClickSelfCast(unit caster, item targetItem)
    if not caster.hasItem(targetItem) or targetItem.getTypeId()!=ITEM_HEALING_POTION
        let usedItem = caster.getItemById(ITEM_HEALING_POTION)
        usedItem.setCharges(usedItem.getCharges()+1)
        return
    new HealingInstance(EventData.getSpellAbilityUnit(), EventData.getSpellAbilityUnit(), POT_HEAL, HealingType.ABILITY)


function onTargetOrderCoconut()
    let order = GetIssuedOrderId()
    let u = GetOrderedUnit()
    if order != Orders.smart or not u.isInventoryFull()
        return

    let target = GetOrderTargetItem()

    // Smart pickup system -> simulate picking up meat like an item if full inventory, like in Bannars StackNSplit system
    // Used to pick up ammo even if inventory's full
    // TODO: Currently only work when troll is in pick up range, make it so the troll move toward ammo even if inventory is full
    if (target != null
        and target.isPickupable()
        and target.getTypeId() == ITEM_COCONUT
        and u.isInventoryFull())
        bool hasCoconut = false
        let inventory = u.getInventory()
        for each in inventory
            if each.getTypeId() == ITEM_COCONUT
                and each.getCharges()<10
                hasCoconut = true
                break
        destroy inventory
        if hasCoconut == true
            return
        let collisionSize = u.getCollisionSize()
        let rangeSq = (150.0 + collisionSize).pow(2)
        if u.getPos().distanceToSq(target.getPos()) <= rangeSq
            target.remove()
            new HealingInstance(u, u, COCONUT_HEAL, HealingType.ITEM)
            onCoconutAddMana(u)
            flashEffect(Abilities.healTarget, u, AttachmentPoints.chest)

function onCoconutAddMana(unit caster)
    caster.addMana(COCONUT_MANA)
    standardTextTag(
            caster.getPos(),
            "+{0}".format(COCONUT_MANA.floor().toString())
            )
            ..setColor(colorA(0, 131, 191, 255))
            ..setPos(caster.getPos().x, caster.getPos().y-70, 0.)
            ..matchVisibility(caster)


init
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrderCoconut())

    EventListener.onCast(ABIL_COCONUT) (unit caster) ->
        onCoconutAddMana(caster)


    EventListener.onTargetCast(ABILITY_HEALING_POTION) (unit caster, unit target) ->
        new HealingInstance(target, caster, POT_HEAL, HealingType.ABILITY)

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_CAST)->
        if EventData.getSpellAbilityId() == ABILITY_HEALING_POTION and EventData.getSpellTargetItem() !=null
            doubleClickSelfCast(EventData.getSpellAbilityUnit() , EventData.getSpellTargetItem())
        
                     
    initHealAbilityTable()
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) ->
        onSelfHealItem()
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        onSpellEffect()




        
