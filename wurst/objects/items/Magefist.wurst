package Magefist

// Standard library imports:
import AbilityObjEditing
import HashMap
import ClosureEvents
import ObjectIdGenerator

// Local imports:
import LocalObjectIDs
import HealingItems
import Panic
import StringBuilder
import ToolTipsUtils
import LocalAssets
import ObjEditingUtils
import ObjectIds
import ChannelAbilityPreset
import ItemIds
import HealingSystem
import ClosureTimers
import SimError
import PlayerExtensions
import Transformation
import UnitExtensions
import BonusHandler
import EquipmentSlots
import CustomItemDefinition




/*
@compiletime function createSpeedBonusAbility()
    new AbilityDefinitionAttackSpeedIncrease(ABILITY_MAGEFIST_ATTACK_SPEED)
        ..setLevels(80)
        ..presetAttackSpeedIncrease(lvl->0.01*lvl/2)        
        ..setName("Magefist Attack speed bonus")
        ..setEditorSuffix("(Wurst)")
*/
IterableMap<unit, Magefist> instances = new IterableMap<unit, Magefist>()

class Magefist
    unit wearer
    item itm = null
    real currentBonus = 0
    int abilId = ABILITY_MAGEFIST_ATTACK_SPEED
    CallbackPeriodic cb
    construct(unit _wearer, item _itm)
        wearer = _wearer
        itm = _itm
        cb = doPeriodically(0.25) (CallbackPeriodic cb) ->
            updateStrengthBonus()


    function updateStrengthBonus()
        let equippedItems = wearer.getOwner().getEquipmentSlots().currentItems
        var totalStrengthBonus = 0
        for each in equippedItems
            let customItemDefinition = customItemDefinitions.get(equippedItems.get(each).getTypeId())
            if customItemDefinition != null
                totalStrengthBonus += customItemDefinition.strengthBonus
        currentBonus = (wearer.getInt(true))/3
        if not (wearer.hasItem(itm) or hasMagefist())
            currentBonus = 0
        wearer.setBonus(Bonus.STRENGTH, (currentBonus+totalStrengthBonus).round())    

    function hasMagefist() returns bool
        let equippedItems = wearer.getOwner().getEquipmentSlots().currentItems
        for each in equippedItems 
            if equippedItems.get(each).getTypeId()== ITEM_MAGEFIST
                return true
        return false            
 
    function onItemDrop()
        nullTimer() -> 
            destroy cb 
            updateStrengthBonus()
            destroy this
    
    function onUnequip()
        doAfter(ANIMATION_PERIOD) ->
            if not hasMagefist() and not wearer.hasItem(itm)       
                onItemDrop()

    ondestroy
        instances.remove(wearer)


function onItemPickup(unit u, item itm)
    if not u.isTroll()
        return
    let instance = instances.get(u)
    if instance == null and itm.getTypeId() == ITEM_MAGEFIST
        instances.put(u, new Magefist(u, itm)) 
        return
    else if instance != null and itm.getTypeId() != ITEM_MAGEFIST
        instance.updateStrengthBonus()

function onItemDrop(unit u, item itm)
    let instance = instances.get(u)
    if instance == null
        return
    if itm == instance.itm
        instance.onItemDrop()
    else
        instance.updateStrengthBonus()

function updateStrengthBonus(unit u)
    let instance = instances.get(u)
    if instance == null
        return
    instance.updateStrengthBonus()

init
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        onItemPickup(GetManipulatingUnit(), GetManipulatedItem())

    registerOnEquipEvent(ITEM_MAGEFIST) (unit troll, item itm) ->
        doAfter(ANIMATION_PERIOD) ->       
            onItemPickup(troll, itm) 

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        onItemDrop(GetManipulatingUnit(), GetManipulatedItem())

    registerOnUnequipEvent(ITEM_MAGEFIST) (unit troll, item itm) ->
        onItemDrop(troll, itm) 

    registerAfterEffect() (unit target, int unitID) ->
        doAfter(ANIMATION_PERIOD)->
            updateStrengthBonus(target)

    EventListener.add(EVENT_PLAYER_HERO_LEVEL) -> 
        updateStrengthBonus(GetTriggerUnit()) 