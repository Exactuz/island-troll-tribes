package MakruraClaw


// Standard library imports:
import AbilityObjEditing
import HashMap
import ClosureEvents
import ObjectIdGenerator

// Local imports:
import LocalObjectIDs
import StringBuilder
import ToolTipsUtils
import BuffObjEditing
import BuffIds
import Abilities
import OrderIds
//import PumpUp
import Icons
import InstantDummyCaster
import ClosureTimers
import UnitExtensions
import ObjEditingUtils
import ObjectIds
import ItemObjEditing
import Items
import LocalAssets
import LocalItemObjEditing
import GlovesDefinition
import AxesDefinition
import ColorUtils

let ABIL_MAKRURA_CLAWS_DMG   = compiletime(ABIL_ID_GEN.next())
let DURATION_HERO = 2.5
let CAST_RANGE = 200.
let MAKRURA_CLAWS_DMG_BONUS = 8
let MAKRURA_PIN_COOLDOWN = 25.
public let MAKRURA_CLAWS_TT = "A pair of Makrura claws, that can be worn as gloves, takes up both gloves and a one-handed weapon slots."+
                              "\n+{0} damage.".format(MAKRURA_CLAWS_DMG_BONUS.toString().color(COLOR_GREEN))+
                              "\n+{0} armor.".format("3".color(COLOR_GREEN))+
                              "\nPin".color(COLOR_TURQUOISE)+
                              ": \nCan be activated to pin a target with your claw, immobilizing and disarming target for {0} seconds, ".format(DURATION_HERO.toString().color(ENERGY_COLOR))+
                              "dealing 40 damage over time. ".format(DURATION_HERO.toString().color(ENERGY_COLOR))+
                              "Pin is canceled if you move 300 range away from the target. "+
                              "\n{0} seconds cooldown.".format(MAKRURA_PIN_COOLDOWN.toString().color(ENERGY_COLOR))

@compiletime function createIronAxeAttackBonusAbility() returns AbilityDefinitionAttackBonusPlus1
    return new AbilityDefinitionAttackBonusPlus1(ABIL_MAKRURA_CLAWS_DMG)
        ..setName("Iron Axe Damage Bonus")
        ..setAttackBonus(1, MAKRURA_CLAWS_DMG_BONUS)
        ..setEditorSuffix("(Wurst)")

@compiletime function createMakruraPinBuff()
    new BuffDefinition(BUFF_MAKRURA_PIN, BuffIds.entanglingRoots)
        ..setName("Pin")
        ..setTooltipNormal("Pin")
        ..setArtTarget(Abilities.stampedeMissileDeath)
        ..setArtSpecial("")
        ..setIcon(LocalIcons.bTNMakruraClaws)
        ..setTooltipNormalExtended(1, "You are pinned for 4 seconds, taking damage over time.")

@compiletime function createMakruraClaws() returns ItemDefinition
    return createUsableItem(ITEM_MAKRURA_CLAWS)
        ..setAbilities(commaList(
            ABILITY_MAKRURA_PIN,
            ABILITY_ARMOR_BONUS_3,
            ABIL_MAKRURA_CLAWS_DMG    
            )
        )
        ..setInterfaceIcon(LocalIcons.bTNMakruraClaws)
        ..setDescription(MAKRURA_CLAWS_TT)
        //..setTintingColor1Red(136)
        //..setTintingColor2Green(0)
        //..setTintingColor3Blue(255)
        ..setModelUsed(LocalItems.makruraClaws)
        ..setHotkey("")
        ..setLumberCost(40)
        ..setScalingValue(1.2)
        ..setNameEnhance("Makrura Claw")
        ..setTooltipExtended(MAKRURA_CLAWS_TT)
        ..setCooldownGroup(toRawCode(ABILITY_MAKRURA_PIN))

@compiletime function createMakruraPinAbility()
    new AbilityDefinitionEntanglingRootscreep(ABILITY_MAKRURA_PIN)
        ..setDummyAbility()
        ..setBuffs(1, BUFF_MAKRURA_PIN.toRawCode())
        ..setMissileArt("")
        ..setArtTarget("")
        ..setArtEffect("")
        ..setDurationHero(1, DURATION_HERO)
        ..setDurationNormal(1, 8.)
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.enemies,
            TargetsAllowed.ground,
            TargetsAllowed.neutral,
            TargetsAllowed.organic,
            TargetsAllowed.hero,
            TargetsAllowed.nonhero
            ))
        ..setCastRange(1, CAST_RANGE)
        ..setCooldown(1, 45.)
        ..setDamageperSecond(1, 10.)
        ..setName("Pin")
        ..setEditorSuffix("(Wurst)")

function onCast(unit caster, unit target)
    if not target.isTroll() 
        return
    caster.disableAttack(true, false) 
    doPeriodicallyTimed(ANIMATION_PERIOD, DURATION_HERO+1.) (CallbackCounted cb) ->
        let casterPos = caster.getPos()
        let targetPos = target.getPos()
        if casterPos.distanceTo(targetPos)>300.
            target.removeAbility(BUFF_MAKRURA_PIN)
        if not target.hasAbility(BUFF_MAKRURA_PIN)
            caster.disableAttack(false, false)
            destroy cb
    flashEffect(Abilities.stampedeMissileDeath, target.getPos())        
    doPeriodicallyCounted(1., 4) (CallbackCounted cb) ->
        flashEffect(Abilities.stampedeMissileDeath, target.getPos())
                      

        



init
    EventListener.onTargetCast(ABILITY_MAKRURA_PIN) (unit caster, unit target) ->
        nullTimer() -> 
            onCast(caster, target)



