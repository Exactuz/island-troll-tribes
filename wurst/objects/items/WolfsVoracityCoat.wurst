package WolfsVoracityCoat

// Standard library imports:
import AbilityObjEditing
import HashMap
import ClosureEvents
import ObjectIdGenerator

// Local imports:
import LocalObjectIDs
import HealingItems
import Panic
import StringBuilder
import ToolTipsUtils
import LocalAssets
import HealingSystem
import UnitExtensions
import Sounds
import Orders
import ClosureTimers
import Transformation
import MoveCorpses


@compiletime function consumeCorpse()
    new AbilityDefinitionCannibalize(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME)
        ..setName("Consume Corpse")
        ..setCheckDependencies(false)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..setHotkeyNormal("E")
        ..presetHitPointsperSecond(lvl -> 20)
        ..presetDurationHero(lvl -> 2.5)
        ..presetDurationNormal(lvl -> 2.5)
        ..presetTooltipNormal(lvl -> "|cffC2E8EB[|r|cffFF6347D|r|cffC2E8EB] - Eat Raw Meat|r")
        ..presetTooltipNormalExtended(lvl -> "Consume a nearby corpse for 50 |cffd67a7ahealth|r.")



public class WolfCoatInstance
    private unit wearer
    private real baseClock

    construct(unit wearer)
        this.wearer = wearer
        this.baseClock = 0
        //PlaySound(Sounds.duskWolf)       
        wearer.removeAbility(LocalAbilityIds.corpseConsume)
        wearer.addAbility(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME)
        wearer.makeAbilityPermanent(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME, true)           
        //EventListener.onCast(wearer, LocalAbilityIds.corpseConsume) (unit caster) ->      
                                 
    ondestroy
        wearer.removeAbility(ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME)
        wearer.addAbility(LocalAbilityIds.corpseConsume)     

IterableMap<unit, WolfCoatInstance> instances = new IterableMap<unit, WolfCoatInstance>()

function consumeCorpseHeal(unit u)
    new HealingInstance(u, u, MEAT_HEAL, HealingType.ITEM)  

function onPickupCoat(unit u)
    if not  u.isTroll()
        return
    if not instances.has(u)
        instances.put(u, new WolfCoatInstance(u))

function onTransformation(unit caster)
    let itm = caster.getItemById(ITEM_WOLF_VORACITY_COAT) // temp fix for voracity coat
    if itm != null
        RemoveItem(itm)
        doAfter(ANIMATION_PERIOD) ->
            caster.addItemById(ITEM_WOLF_VORACITY_COAT)


function onDropCoat(unit u, item itm)
    if instances.has(u)
        destroy instances.getAndRemove(u)


public function onWolfVoracityCoat(unit caster) returns bool
    // Create the corpse that is dropped.
    //createCorpse(caster.getPos())
    // Decrement the count.
    if (counts.get(caster)>0)
        new HealingInstance(caster, caster, MEAT_HEAL, HealingType.ITEM)
        updateCount(caster, -1)
        return true
    return false


function onWolfVoracityCoatDrop(unit caster, item itm)
    
    // Create the corpse that is dropped.
    //createCorpse(caster.getPos())
    // Decrement the count.
    let temp =counts.get(caster)    
    updateCount(caster, -temp)
        //caster.addItemById(itemId)
        
       // caster.addItemById(ITEM_WOLF_VORACITY_COAT)
       // print("item added")
        //caster.addItemByHandleId(itm.getHandleId())




init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_WOLF_VORACITY_COAT
            onWolfVoracityCoat(GetManipulatingUnit())

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_WOLF_VORACITY_COAT
            onPickupCoat(GetManipulatingUnit())

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
        if (GetTriggerUnit().hasItemById(ITEM_WOLF_VORACITY_COAT)) and (GetSpellAbilityId() == ABILITY_WOLF_VORACITY_COAT_CORPSE_CONSUME )
            consumeCorpseHeal(EventData.getSpellAbilityUnit())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_WOLF_VORACITY_COAT
            onDropCoat(GetManipulatingUnit(), GetManipulatedItem())

    registerAfterEffect() (unit target, int unitID) ->
        onTransformation(target)        
/*
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatingUnit().isTroll()
            if GetManipulatedItem().getTypeId() == ITEM_WOLF_VORACITY_COAT
                onWolfVoracityCoatDrop(GetManipulatingUnit(),GetManipulatedItem()) 
*/