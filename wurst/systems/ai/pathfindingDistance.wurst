package pathfindingDistance


// Standard library imports:
import ClosureEvents
import ChannelAbilityPreset
import Orders
import LinkedList
import Toolkit
import DummyUnits
import Knockback3

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import UnitExtensions
import Lodash
import DiseasePotion
import InstantDummyCaster
import SimError
import BuffObjEditing
import BuffIds
import Abilities
import PlayerExtensions
import HashList
import UnitIds
import HashMap
import ClosureTimers
import TimerUtils
import GameTimer
import ResourceSpawns
import TerrainUtils




HashList<item> items = new HashList<item>()

@compiletime function createDistanceDummyCheckUnit()
    new UnitDefinition(UNIT_DISTANCE_CHECK_DUMY, UnitIds.shade)
        ..setSpeedBase(522)
        ..setSpeedMinimum(522)
        ..setSpeedMaximum(522)
        


function onSpawnRandom(player _player)
    let troll = _player.getTroll()
    let range = 3000

    var pos = troll.getPos()
    let keys = itemsSpawnedPerIsland.keys()
    let islandItems =itemsSpawnedPerIsland.get(keys.get(0))
    for each in islandItems
        doAfter(ANIMATION_PERIOD) ->     
            pos.x = pos.x+GetRandomInt(-range, range)
            pos.y = pos.y+GetRandomInt(-range, range)
            let itm = createItem(ITEM_STICK, pos)
            items.add(itm)


function onDist(player _player)
    let destructableArea = 130.
    let destructableRect = Rect(-1*destructableArea,-1*destructableArea,destructableArea,destructableArea)
    let troll = _player.getTroll()
    HashMap<item, real> distances = new HashMap<item, real >()
    let islandItems = itemsSpawnedPerIsland.get(nwIslandSpawner)
    for each in islandItems
        let dummy = createUnit(_player, UNIT_DISTANCE_CHECK_DUMY, troll.getPos())
        let currentTime = getElapsedGameTime()
        //tmr.start(time, timerCallBack)
        doAfter(ANIMATION_PERIOD)->
            dummy.issuePointOrder(OrderId2String(OrderIds.move), each.getPos())
            doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
                let angle = dummy.getFacingAngle()
                let dummyPos = dummy.getPos()
                if dummy.getPos().distanceTo(each.getPos())<150.
                    let timeElapsed = getElapsedGameTime()-currentTime
                    distances.put(each, timeElapsed)
                    print("reached item in "+timeElapsed.toString()+ " seconds")
                    dummy.remove()   
                    destroy cb
                    //Knockback3.add(dummy, dummyPos+angle.toVec(36), 2000)
                else
                    
                    /*
                    if (dummyPos+angle.toVec(36)).isTerrainWalkable()
                        print("terrain walkable")
                        MoveRectTo(destructableRect, dummyPos.x, dummyPos.y)
                        EnumDestructablesInRect(destructableRect, null) ->
                        let des = GetEnumDestructable()
                        if not des.getLife() > 0.
                            print("no trees")
                            dummy.setPos(dummyPos+angle.toVec(36))
                            nullTimer() -> 
                                dummy.issuePointOrder(OrderId2String(OrderIds.move), each.getPos())
                    */         



init
    registerToolkitCommand("dist") (triggerPlayer, args) ->
        //onDist(triggerPlayer)

    registerToolkitCommand("spawnrandom") (triggerPlayer, args) ->
        //onSpawnRandom(triggerPlayer)        
