package InventoryLimits
import UnitExtensions
import ItemExtensions
import RegisterEvents
import GameConfig
import Lodash
import GameStates
import LocalObjectIDs
import PlayerExtensions
import ClosureTimers

class Restriction
    int maxCount
    Function<item, int> getCount

    construct(int maxCount, Function<item, int> getCount)
        this.maxCount = maxCount
        this.getCount = getCount

    construct(Function<item, int> getCount)
        this.maxCount = 1
        this.getCount = getCount

let restrictions = new OwnedLinkedList<Restriction>()

public function enforceInventoryLimits(unit whichUnit, item whichItem)
    if not whichUnit.isTroll()
        return

    bool isManipulatedItemEquipped = false
    int equippedItemIndex = 0
    let restrictionsForItem = filter(r -> r.getCount.call(whichItem) > 0, restrictions)


    for restriction in restrictionsForItem
        
        var inventory = whichUnit.getInventory()
        let equippedItems = whichUnit.getOwner().getEquipmentSlots().currentItems
        for i = 0 to equippedItems.size()
            let equippedItem = equippedItems.get(i)
            if equippedItem!= null
                inventory.add(equippedItem)
            if equippedItem == whichItem
                isManipulatedItemEquipped = true
                equippedItemIndex = i
        
        let currCount = inventory
            .map(i -> restriction.getCount.call(i))
            .sum()

        if currCount > restriction.maxCount
            if isManipulatedItemEquipped
                nullTimer() ->
                    whichUnit.getOwner().getEquipmentSlots().unequipItem(whichItem, equippedItemIndex)
            else
                whichUnit.removeItem(whichItem)
            break

        destroy inventory

    destroy restrictionsForItem

init
    restrictions
    ..add(new Restriction(i -> i.isGloves().toInt()))
    ..add(new Restriction(i -> i.isBoots().toInt()))
    ..add(new Restriction(i -> i.isCoat().toInt()))
    ..add(new Restriction(i -> i.isSpell().toInt()))
    ..add(new Restriction(i -> i.isGloves().toInt()))
    ..add(new Restriction(i -> (i.getTypeId()==ITEM_STASHED_RAW_MEAT).toInt()))
    ..add(new Restriction(2, i -> ((i.getTypeId() == ITEM_BATTLE_AXE) 
                                or (i.getTypeId() == ITEM_IRON_STAFF)
                                or (i.getTypeId() == ITEM_CONDUCTING_ROD)
                                or (i.getTypeId() == ITEM_BATTLE_STAFF)) ? 2 : i.isAxeOrShield().toInt()))
    ..add(new Restriction(i -> i.isPinion().toInt()))
    ..add(new Restriction(i -> i.isShield().toInt()))

    GameStates.gameplay.onEnter() state ->
        if gameConfig.getInventoryLimits()
            registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
                enforceInventoryLimits(GetManipulatingUnit(), GetManipulatedItem())
