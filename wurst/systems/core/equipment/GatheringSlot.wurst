package GatheringSlot

// Standard library imports:
import HashMap
import AbilityObjEditing
import ClosureEvents
import DamageEvent
import InstantDummyCaster
import StandardTextTags

// Local imports:
import ColorUtils
import ChatCommands
import ChatUtils
import LocalObjectIDs
import UnitExtensions
import ToolTipsUtils
import ObjectIds
import Sleep
import ChannelAbilityPreset
import ClosureTimers
import Orders
import HealingSystem
import BuffObjEditing
import BuffIds
import Abilities
import StupefyField
import DamageListeners
import LocalAssets
import SimError
import FoodSlots
import ItemPoolExtensions
import LinkedList
import OnUnitEnterLeave
import GameStates
import Tribe
import PlayerExtensions
import GameConfig
import Transformation
import UnitIds
import Items
import LocalItemObjEditing
import HashList
import IdListConstant
import QuickMake
import TrollUnitTextConstant
import TrophyHidev2
import BonusHandler
import EquipmentSlotFrames



public IterableMap<unit, GatheringSlot> gatheringSlotInstances = null
LinkedList<int> BLACKLISTED_ITEMS_LIST = null



let TT_NAME = "Materials Slot"
let TT_TOOLTIP = "You can carry almost all raw and crafted materials in this slot."

public constant BACKPACK_ITEM_LIST = new LinkedList<int>()
    ..addAll(MATERIAL_LIST)
    ..addAll(CRAFTED_MATERIAL_LIST)
    ..addAll(HIDE_LIST)
    ..addAll(POLE_LIST)
    ..addAll(COLOR_HERB_LIST)
    ..addAll(HERB_LIST)
    ..remove(ITEM_MAGIC)
    ..add(ITEM_HAWK_EGG)
    ..add(ITEM_POISON)
    ..add(ITEM_MEDALLION_COURAGE)
    ..add(ITEM_MEDALLION_COURAGE_NSS)
    


@compiletime function createDummyItem() returns ItemDefinition
    return createBasicItem(ITEM_EQUIPMET_DUMMY_SLOT)
            ..setName(TT_NAME)
            ..setCanBeDropped(true)
            ..setInterfaceIcon(LocalIcons.bTNResourcesPack)
            ..setTooltipExtended(TT_TOOLTIP)
            ..setCanBeSoldToMerchants(false)


public class GatheringSlot
    unit hero = null
    item dummy1 = null
    item dummy2 = null
    HashList<item> dummyItemsList = new HashList<item>() // false if dummy item is not in the inventory
    bool isTriggerPaused = false
    real currentDamagePenalty = 0

    construct(unit _hero)
        hero = _hero
        dummy1 = createItem(ITEM_EQUIPMET_DUMMY_SLOT, hero.getPos())..setVisible(false)
        dummy2 = createItem(ITEM_EQUIPMET_DUMMY_SLOT, hero.getPos())..setVisible(false)
        dummyItemsList.add(dummy1, dummy2)
        nullTimer() -> 
            updateDummyItems()

    function updateDummyItems()
        isTriggerPaused = true
        let currentEquippedItems = getCurrentEquippedItems()
        let currentGatheringItems = getCurrentGatheringItems(currentEquippedItems)
        let currentDummyItems = getCurrentDummyItems()
        
        
        if (2-currentGatheringItems > currentDummyItems)
            for i = 1 to 2-currentGatheringItems
                //print("addDummy")
                //print("currentGatheringItems "+currentGatheringItems.toString())
                //print("currentDummyItems"+ currentDummyItems.toString())
                nullTimer() ->        
                    addDummyItem(i-1)

        if  (2-currentGatheringItems < currentDummyItems)
            for i = 1 downto 2-currentGatheringItems
                //print("removeDummy")
                //print("currentGatheringItems "+currentGatheringItems.toString())
                //print("currentDummyItems"+ currentDummyItems.toString())
                nullTimer() ->        
                    removeDummyItem(2-currentGatheringItems)
        nullTimer() -> 
            updateBones(currentEquippedItems)
        doAfter(ANIMATION_PERIOD) ->                                
            isTriggerPaused = false

    function updateBones(int currentEquippedItems)
       // print("currentEquippedItems = "+currentEquippedItems.toString())
        var bones = 0
        var sticks = 0
        var materials = 0
        let inventory = hero.getInventory()
        for each in inventory
            if each.getTypeId() == ITEM_STICK
                sticks+=1
            else if each.getTypeId() == ITEM_BONE
                bones+=1
            if BACKPACK_ITEM_LIST.has(each.getTypeId()) and each.getTypeId()!=ITEM_STICK and each.getTypeId()!= ITEM_BONE
                materials+=1
        materials = min(materials, currentEquippedItems) // count materials up to amount of equipped items
        let itemsToDisable = currentEquippedItems-materials
        sticks =min(sticks, itemsToDisable)
        let bonesNeeded = max(itemsToDisable-sticks)
        //print("disabling "+sticks.toString()+" sticks")
        bones = min(bones, bonesNeeded)
        //print("disabling "+bones.toString()+" bones")
        let newDamagePenalty = sticks+bones*2
        //print("currentDamagePenalty = -"+currentDamagePenalty.toString())
        hero.addBonus(Bonus.DAMAGE, currentDamagePenalty)
        currentDamagePenalty = newDamagePenalty.toReal()
        //print("newDamagePenalty = -"+newDamagePenalty.toString())
        hero.addBonus(Bonus.DAMAGE, -newDamagePenalty.toReal())

        destroy inventory
        

    function getCurrentGatheringItems(int currentEquippedItems) returns int
        int currentGatheringItems = 0
        let inventory = hero.getInventory()
        for each in inventory
            if BACKPACK_ITEM_LIST.has(each.getTypeId())
                currentGatheringItems+=1
        currentGatheringItems+=(2-currentEquippedItems)       
        if currentGatheringItems >2
            currentGatheringItems = 2  
        destroy inventory             
        return currentGatheringItems

    function getCurrentEquippedItems() returns int
        let currentEquippedItems = hero.getOwner().getEquipmentSlots().currentItems
        if currentEquippedItems == null
            return 0
        int counter = 0
        for i=0 to INVENTORY_BUTTON_AMOUNT
            if currentEquippedItems.get(i) !=null
                counter++
        return counter


    function getCurrentDummyItems() returns int
        int currentDummyItems = 0
        let inventory =  hero.getInventory()
        for each in inventory
            if each.getTypeId() == ITEM_EQUIPMET_DUMMY_SLOT
                currentDummyItems+=1
        destroy inventory        
        return currentDummyItems       


    function removeDummyItem(int index)
        let dummy = dummyItemsList.get(index)
        hero.removeItem(dummy)
        nullTimer() -> 
            dummy.setVisible(false)
        //print("removed dummy item")

    function addDummyItem(int index)
        let dummy = dummyItemsList.get(index)
        if hero.hasItem(dummy)
            //print("hero already has x dummy")
            return                  
        let inventory = hero.getInventory()
        for each in inventory
            if BLACKLISTED_ITEMS_LIST.has(each.getTypeId())
                inventory.remove(each)
        while hero.isInventoryFull()
            if inventory.getLast().getTypeId() == ITEM_EQUIPMET_DUMMY_SLOT
                inventory.remove(inventory.getLast())
            else
                //print("removed item")
                //let pseudoslot to trollInventoryPseudoSlotCountMap.get(hero.getTypeId())
                hero.removeItem(inventory.getLast())
        hero.addItemHandle(dummyItemsList.get(index))
        destroy inventory
        //print("added dummy item "+index.toString())
    
    function onTargetOrder(item itm) 
        if not BACKPACK_ITEM_LIST.has(itm.getTypeId())
            return
        if hero.hasItem(itm) or itm == null
            //print("handled by stack system")
            return
        var index = 0
        if hero.hasItem(dummy1)
            //print("found dumym1")
            index = 0
        else if hero.hasItem(dummy2)
           // print("found dummy2")
            index = 1
        else
            //print("full slot") 
            return   
        isTriggerPaused= true    
        removeDummyItem(index)
        nullTimer() -> 
            hero.addItemHandle(itm)
            nullTimer() -> 
                isTriggerPaused= false
                //print("added item to dummy "+index.toString())
            

function onPickup(unit troll, item itm)
    let instance = gatheringSlotInstances.get(troll)
    if instance == null
        return
    if instance.isTriggerPaused == true
        return
    nullTimer() -> 
        instance.updateDummyItems()

function onDummyDrop(unit troll, item itm)
    nullTimer() -> 
        itm.setVisible(false)
    if not troll.isAlive()
        return
    let instance = gatheringSlotInstances.get(troll)
    if instance == null
        return
    if instance.isTriggerPaused == true
        return    
    nullTimer() -> 
        //print(instance.isTriggerPaused)
        //print("added dummy on drop")
        troll.addItemHandle(itm)

function onRevive(unit troll)
    let instance = gatheringSlotInstances.get(troll)
    if instance == null
        //print("null instance")
        return
    if instance.isTriggerPaused == true
        //print("triggers paused")
        return    
    doAfter(ANIMATION_PERIOD) ->
        instance.updateDummyItems()

function onQuickMakePriorEffect(unit caster)
    let instance = gatheringSlotInstances.get(caster)
    if instance == null
        return
    instance.isTriggerPaused = true

function onQuickMakeAfterEffect(unit caster)
    let instance = gatheringSlotInstances.get(caster)
    if instance == null
        return
    instance.isTriggerPaused = false
    doAfter(ANIMATION_PERIOD) ->
        instance.updateDummyItems() 
        

function onTargetOrder()
    let order = GetIssuedOrderId()
    let u = GetOrderedUnit()
    let instance = gatheringSlotInstances.get(u)
    if instance == null
        return
    if instance.isTriggerPaused == true
        return
    if order != Orders.smart or not u.isInventoryFull() or not gatheringSlotInstances.has(u)
        return
    let target = GetOrderTargetItem()

    // Smart pickup system -> simulate picking up meat like an item if full inventory, like in Bannars StackNSplit system
    // Used to pick up ammo even if inventory's full
    // TODO: Currently only work when troll is in pick up range, make it so the troll move toward ammo even if inventory is full
    if (target != null
        and target.isPickupable()
        and gatheringSlotInstances.has(u)
        and u.isInventoryFull()
        and u.hasItemById(ITEM_EQUIPMET_DUMMY_SLOT))
        let collisionSize = u.getCollisionSize()
        let rangeSq = (150.0 + collisionSize).pow(2)
        if u.getPos().distanceToSq(target.getPos()) <= rangeSq
            nullTimer() ->
                instance.onTargetOrder(target)

function onUnitEnter(unit troll)
    if troll.getOwner().getId() == PLAYER_NEUTRAL_PASSIVE or troll.getOwner().getId() ==PLAYER_NEUTRAL_AGGRESSIVE
        return
    if not troll.isTroll()
        return
    if not gatheringSlotInstances.has(troll)
        gatheringSlotInstances.put(troll, new GatheringSlot(troll))

init
    doAfter(1.) -> 
        gatheringSlotInstances = new IterableMap<unit, GatheringSlot>()
        BLACKLISTED_ITEMS_LIST = asList(ITEM_MAGE_GRIMOIRE, ITEM_THIEFS_POCKET_DUMMY, ITEM_HUNTER_TROPHY_HIDE_DUMMY)
        ..addAll(TROPHY_LIST)
        
    onEnter(()->onUnitEnter(getEnterLeaveUnit()))    

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if BACKPACK_ITEM_LIST.has(GetManipulatedItem().getTypeId())
            onPickup(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if BACKPACK_ITEM_LIST.has(GetManipulatedItem().getTypeId())
            onPickup(GetManipulatingUnit(), GetManipulatedItem())  

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_EQUIPMET_DUMMY_SLOT
            onDummyDrop(GetManipulatingUnit(), GetManipulatedItem())           

    registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        onRevive(GetTriggerUnit())  

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrder())  

    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)

    registerPriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)
            
        

    